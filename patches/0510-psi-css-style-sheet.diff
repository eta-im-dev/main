--- a/options/default.xml
+++ b/options/default.xml
@@ -116,6 +116,7 @@
 				<use-message-icons type="bool">true</use-message-icons>
 				<scaled-message-icons type="bool">false</scaled-message-icons>
 				<warn-before-clear type="bool">true</warn-before-clear>
+				<css type="QString" />
 			</chat>
 			<save>
 				<toolbars-state type="QByteArray"/>
@@ -136,6 +137,7 @@
 					<show comment="Show status messages" type="bool">false</show>
 				</status-messages>
 				<tooltip comment="Display options for the contact list tooltips">
+					<css type="QString"></css>
 					<avatar comment="Display avatar" type="bool">true</avatar>
 					<client-version comment="Display client version information" type="bool">true</client-version>
 					<geolocation comment="Display geolocation information" type="bool">true</geolocation>
@@ -144,6 +146,58 @@
 				</tooltip>
 				<temp-no-roster-animation comment="Disable animated icons. This option will be removed as soon as the contactlist code is optimized enough" type="bool">false</temp-no-roster-animation>
 				<account-sort-style type="QString">alpha</account-sort-style>
+				<css type="QString">/* frame of avatar - general settings */
+/* фрейм с аватаром - общие настройки */
+RosterAvatarFrame * {
+	margin: 1px;
+}
+
+/* frame of avatar - avatar */
+/* фрейм с аватаром - аватар */
+QLabel#lb_avatar {
+	margin-left: 0px;
+	margin-top: 2px;
+	margin-bottom: 2px;
+	border: 1px solid #949494;
+	border-radius: 3px;
+}
+
+/* frame of avatar - nick */
+/* фрейм с аватаром - ник */
+QLabel#lb_nick {
+	margin: 2px;
+	margin-right: 1px;
+	margin-bottom: 3px;
+	border: 1px solid #949494;
+	border-radius: 3px;
+}
+
+/* frame of avatar - buttons of PEP and status */
+/* фрейм с аватаром - кнопки PEP и статуса */
+QToolButton#tb_status, #tb_mood, #tb_activity {
+	margin-left: 1px;
+	margin-right: 1px;
+	margin-bottom: 2px;
+	width: 100%;
+}
+
+QToolButton#tb_status {
+	margin-top: 0px;
+	margin-bottom: 1px;
+}
+
+/* frame of avatar - button of status, arrow */
+/* фрейм с аватаром - кнопка статуса, стрелка */
+QToolButton#tb_status::menu-indicator {
+	background: argb(0,0,0,0);
+}
+
+/* frame of avatar - field of status message */
+/* фрейм с аватаром - строка статусного сообщения */
+QLineEdit#le_status_text {
+	margin-right: 0px;
+	margin-bottom: 2px;
+}</css>
 				<always-on-top type="bool">false</always-on-top>
 				<automatically-resize-roster type="bool">false</automatically-resize-roster>
 				<grow-roster-upwards type="bool">true</grow-roster-upwards>
@@ -324,6 +378,7 @@
 					<message type="QString">Sans Serif,9,-1,5,50,0,0,0,0,0</message>
 					<passive-popup type="QString">Sans Serif,7,-1,5,50,0,0,0,0,0</passive-popup>
 				</font>
+				<css type="QString" />
 			</look>
 			<notifications>
 				<send-receipts type="bool" >true</send-receipts>
@@ -340,6 +395,7 @@
 						<status type="int">2000</status>
 					</delays>
 					<enabled type="bool">false</enabled>
+					<css type="QString"></css>
 					<top-to-bottom type="bool">false</top-to-bottom>
 					<at-left-corner type="bool">false</at-left-corner>
 					<incoming-chat type="bool">true</incoming-chat>
--- a/src/contactlistitemmenu.cpp
+++ b/src/contactlistitemmenu.cpp
@@ -21,12 +21,17 @@
 #include "contactlistitemmenu.h"
 
 #include "shortcutmanager.h"
+#include "psioptions.h"
 
 ContactListItemMenu::ContactListItemMenu(ContactListItem* item, ContactListModel* model)
 	: QMenu(0)
 	, item_(item)
 	, model_(model)
 {
+	const QString css = PsiOptions::instance()->getOption("options.ui.contactlist.css").toString();
+	if (!css.isEmpty()) {
+		setStyleSheet(css);
+	}
 }
 
 ContactListItemMenu::~ContactListItemMenu()
--- a/src/gcuserview.cpp
+++ b/src/gcuserview.cpp
@@ -523,6 +523,10 @@ void GCUserView::doContextMenu(QTreeWidgetItem *i)
 	pm->addAction(act);
 	act->setData(3);
 
+	const QString css = PsiOptions::instance()->getOption("options.ui.chat.css").toString();
+	if (!css.isEmpty()) {
+		pm->setStyleSheet(css);
+	}
 	int x = -1;
 	bool enabled = false;
 	act = pm->exec(QCursor::pos());
--- a/src/groupchatdlg.cpp
+++ b/src/groupchatdlg.cpp
@@ -1749,6 +1749,11 @@ QString GCMainDlg::desiredCaption() const
 
 void GCMainDlg::setLooks()
 {
+	const QString css = PsiOptions::instance()->getOption("options.ui.chat.css").toString();
+	if (!css.isEmpty()) {
+		setStyleSheet(css);
+		d->mle()->setCssString(css);
+	}
 	ui_.vsplitter->optionsChanged();
 	ui_.mle->optionsChanged();
 
--- a/src/mainwin.cpp
+++ b/src/mainwin.cpp
@@ -514,6 +514,7 @@ MainWin::MainWin(bool _onTop, bool _asTool, PsiCon* psi)
 
 		/*QShortcut *sp_ss = new QShortcut(QKeySequence(tr("Ctrl+Shift+N")), this);
 		connect(sp_ss, SIGNAL(triggered()), SLOT(avcallConfig()));*/
+	optionChanged("options.ui.contactlist.css");
 }
 
 MainWin::~MainWin()
@@ -546,6 +547,12 @@ void MainWin::optionChanged(const QString& option)
 		loadToolbarsState();
 		//buildToolbars(); //FIXME!!! not a very good solution
 	}
+	else if (option == "options.ui.contactlist.css") {
+		const QString css = PsiOptions::instance()->getOption("options.ui.contactlist.css").toString();
+		if (!css.isEmpty()) {
+			setStyleSheet(css);
+		}
+	}
 }
 
 void MainWin::registerAction( IconAction* action )
--- a/src/psichatdlg.cpp
+++ b/src/psichatdlg.cpp
@@ -249,6 +249,11 @@ void PsiChatDlg::setLooks()
 {
 	ChatDlg::setLooks();
 
+	const QString css = PsiOptions::instance()->getOption("options.ui.chat.css").toString();
+	if (!css.isEmpty()) {
+		setStyleSheet(css);
+		chatEdit()->setCssString(css);
+	}
 	ui_.splitter->optionsChanged();
 	ui_.mle->optionsChanged();
 
--- a/src/psicon.cpp
+++ b/src/psicon.cpp
@@ -501,6 +501,10 @@ bool PsiCon::init()
 	d->iconSelect = new IconSelectPopup(0);
 	connect(PsiIconset::instance(), SIGNAL(emoticonsChanged()), d, SLOT(updateIconSelect()));
 
+	const QString css = options->getOption("options.ui.chat.css").toString();
+	if (!css.isEmpty())
+		d->iconSelect->setStyleSheet(css);
+
 	// first thing, try to load the iconset
 	bool result = true;;
 	if( !PsiIconset::instance()->loadAll() ) {
@@ -1330,6 +1334,13 @@ void PsiCon::optionChanged(const QString& option)
 	if (option == "options.p2p.bytestreams.listen-port") {
 		s5b_init();
 	}
+	if (option == "options.ui.chat.css") {
+		QString css = PsiOptions::instance()->getOption(option).toString();
+		if (!css.isEmpty())
+			d->iconSelect->setStyleSheet(css);
+		return;
+	}
+
 #ifdef USE_PEP
 	if (option == tuneUrlFilterOptionPath || option == tuneTitleFilterOptionPath) {
 		d->tuneManager->setTuneFilters(PsiOptions::instance()->getOption(tuneUrlFilterOptionPath).toString().split(QRegExp("\\W+")),
--- a/src/tabs/tabdlg.cpp
+++ b/src/tabs/tabdlg.cpp
@@ -368,6 +368,11 @@ void TabDlg::setLooks()
 		tabWidget_->setTabPosition(QTabWidget::South);
 
 	setWindowOpacity(double(qMax(MINIMUM_OPACITY,PsiOptions::instance()->getOption("options.ui.chat.opacity").toInt()))/100);
+
+	const QString css = PsiOptions::instance()->getOption("options.ui.chat.css").toString();
+	if (!css.isEmpty()) {
+		setStyleSheet(css);
+	}
 }
 
 void TabDlg::tabSelected(QWidget* _selected)
--- a/src/widgets/fancypopup.cpp
+++ b/src/widgets/fancypopup.cpp
@@ -213,6 +213,11 @@ void FancyPopup::Private::initContents(QString title, const PsiIcon *icon, bool
 	ui_.closeButton->setIcon( popup->style()->standardPixmap(QStyle::SP_TitleBarCloseButton) );
 	ui_.closeButton->setFixedSize(BUTTON_WIDTH, BUTTON_HEIGHT);
 	connect(ui_.closeButton, SIGNAL(clicked()), popup, SLOT(hide()));
+
+	const QString css = PsiOptions::instance()->getOption("options.ui.notifications.passive-popups.css").toString();
+	if (!css.isEmpty()) {
+		popup->setStyleSheet(css);
+	}
 }
 
 bool FancyPopup::Private::eventFilter(QObject *o, QEvent *e)
--- a/src/widgets/iconaction.cpp
+++ b/src/widgets/iconaction.cpp
@@ -30,6 +30,8 @@ class PsiIcon;
 class Iconset;
 #endif
 
+#include "psioptions.h"
+
 #include <QLayout>
 #include <QMenu>
 #include <QTimer>
@@ -441,6 +443,11 @@ IconActionGroup::IconActionGroup(QObject *parent, const char *name, bool exclusi
 	d->updatePopup();
 
 	d->exclusive = exclusive;
+
+	const QString css = PsiOptions::instance()->getOption("options.ui.contactlist.css").toString();
+	if (!css.isEmpty()) {
+		d->popup->setStyleSheet(css);
+	}
 }
 
 IconActionGroup::~IconActionGroup()
--- a/src/widgets/psitabwidget.cpp
+++ b/src/widgets/psitabwidget.cpp
@@ -74,6 +74,7 @@ PsiTabWidget::PsiTabWidget(QWidget *parent)
 	stacked_ = new QStackedLayout(layout_);
 
 	setTabPosition(QTabWidget::North);
+	setLooks();
 
 	if (!PsiOptions::instance()->getOption("options.ui.tabs.show-tab-close-buttons").toBool()){
 		tabBar_->setTabsClosable(false);
@@ -177,9 +178,18 @@ void PsiTabWidget::addTab(QWidget *widget, QString name, const QIcon &icon)
 		tabBar_->addTab(icon, name);
 	else
 		tabBar_->addTab(name);
+	setLooks();
 	showPage(currentPage());
 }
 
+void PsiTabWidget::setLooks()
+{
+	const QString css = PsiOptions::instance()->getOption("options.ui.chat.css").toString();
+	if (!css.isEmpty()) {
+		setStyleSheet(css);
+	}
+}
+
 /**
  * Selects the page for the specified widget.
  */
--- a/src/widgets/psitabwidget.h
+++ b/src/widgets/psitabwidget.h
@@ -67,6 +67,7 @@ public:
 public slots:
 	void setCurrentPage(int);
 	void removeCurrentPage();
+	void setLooks();
 
 signals:
 	void mouseDoubleClickTab(QWidget *tab);
--- a/src/widgets/psitiplabel.cpp
+++ b/src/widgets/psitiplabel.cpp
@@ -55,6 +55,10 @@ void PsiTipLabel::init(const QString& text)
 			enableColoring_ = false;
 		}
 	}
+	const QString css = PsiOptions::instance()->getOption("options.ui.contactlist.tooltip.css").toString();
+	if (!css.isEmpty()) {
+		setStyleSheet(css);
+	}
 }
 
 void PsiTipLabel::setText(const QString& text)
--- a/src/widgets/urlobject.cpp
+++ b/src/widgets/urlobject.cpp
@@ -19,6 +19,7 @@
  */
 
 #include "urlobject.h"
+#include "psioptions.h"
 
 #include <QApplication>
 #include <QClipboard>
@@ -231,6 +232,7 @@ QMenu *URLObject::createPopupMenu(const QString &lnk)
 	}
 
 	m->addAction(d->act_copy);
+	m->setStyleSheet(PsiOptions::instance()->getOption("options.ui.look.css").toString());
 	return m;
 }
 
diff --git a/src/statusmenu.cpp b/src/statusmenu.cpp
index 1e13682..cff1cbe 100755
--- a/src/statusmenu.cpp
+++ b/src/statusmenu.cpp
@@ -36,6 +36,10 @@
 StatusMenu::StatusMenu(QWidget* parent, PsiCon* _psi )
 	: QMenu(parent), psi(_psi)
 {
+	const QString css = PsiOptions::instance()->getOption("options.ui.contactlist.css").toString();
+	if (!css.isEmpty()) {
+		setStyleSheet(css);
+	}
 	connect(psi, SIGNAL(statusPresetsChanged()), this, SLOT(presetsChanged()));
 	installEventFilter(this);
 }
@@ -65,6 +69,10 @@ void StatusMenu::fill()
 		IconActionGroup* submenu = new IconActionGroup(this);
 		submenu->setText(tr("Presets"));
 		submenu->setPsiIcon("psi/action_templates");
+		const QString css = o->getOption("options.ui.contactlist.css").toString();
+		if (!css.isEmpty()) {
+			submenu->popup()->setStyleSheet(css);
+		}
 		addPresets(submenu);
 		submenu->popup()->installEventFilter(this);
 	}
