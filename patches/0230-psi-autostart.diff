--- psi.orig/src/applicationinfo.cpp
+++ psi/src/applicationinfo.cpp
@@ -383,3 +383,28 @@ QString ApplicationInfo::currentProfileD
 {
 	return pathToProfile(activeProfile, type);
 }
+
+QString ApplicationInfo::desktopFile()
+{
+	QString dFile;
+	const QString execFileName = QFileInfo(qApp->applicationFilePath()).fileName();
+	const QString desktopFile = QString("/usr/share/applications/%1.desktop").arg(execFileName);
+	QFile f(desktopFile);
+	if(f.open(QIODevice::ReadOnly)) {
+		dFile = QString::fromUtf8(f.readAll());
+	}
+	else {
+		dFile = "[Desktop Entry]\n";
+		dFile += "Version=1.0\n";
+		dFile += "Type=Application\n";
+		dFile += QString("Name=%1\n").arg(name());
+		dFile += "GenericName=Jabber Client\n";
+		dFile += "Comment=Communicate over the Jabber network\n";
+		dFile += QString("Icon=%1\n").arg(execFileName);
+		dFile += QString("Exec=%1\n").arg(execFileName);
+		dFile += "Terminal=false\n";
+		dFile += "Categories=Network;InstantMessaging;Qt;";
+	}
+
+	return dFile;
+}
--- psi.orig/src/applicationinfo.h
+++ psi/src/applicationinfo.h
@@ -44,6 +44,9 @@ public:
 	static QString optionsNS();
 	static QString storageNS();
 	static QString fileCacheNS();
+
+	// Common
+	static QString desktopFile();
 };
 
 #endif
--- psi.orig/src/options/opt_application.cpp
+++ psi/src/options/opt_application.cpp
@@ -13,9 +13,17 @@
 #include "qsettings.h"
 #include <QList>
 #include <QMessageBox>
+#include <QDir>
 
 #include "ui_opt_application.h"
 
+#ifdef Q_OS_WIN
+	static const QString regString = "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run";
+#endif
+#ifdef HAVE_X11
+	static const QString psiAutoStart = "/.config/autostart/psi-plus.desktop";
+#endif
+
 class OptApplicationUI : public QWidget, public Ui::OptApplication
 {
 public:
@@ -60,6 +68,7 @@ QWidget *OptionsTabApplication::widget()
 
 #ifdef Q_OS_MAC
 	d->gb_docklet->hide();
+	d->ck_auto_load->hide();
 #endif
 
 	if (!haveAutoUpdater_) {
@@ -126,6 +135,29 @@ void OptionsTabApplication::applyOptions
 	}
 	QSettings s(ApplicationInfo::homeDir(ApplicationInfo::ConfigLocation) + "/psirc", QSettings::IniFormat);
 	s.setValue("last_lang", itemData);
+
+	//Auto-load
+#ifdef Q_OS_WIN
+	QSettings set(regString, QSettings::NativeFormat);
+	if(d->ck_auto_load->isChecked()) {
+		set.setValue(ApplicationInfo::name(), QDir::toNativeSeparators(qApp->applicationFilePath()));
+	}
+	else {
+		set.remove(ApplicationInfo::name());
+	}
+#endif
+#ifdef HAVE_X11
+	QDir home = QDir::home();
+	if (!home.exists(".config/autostart")) {
+		home.mkpath(".config/autostart");
+	}
+	QFile f(home.absolutePath() + psiAutoStart);
+	if (f.open(QIODevice::WriteOnly | QIODevice::Text | QIODevice::Truncate)) {
+		const QString contents = ApplicationInfo::desktopFile().trimmed();
+		f.write(contents.toUtf8());
+		f.write(QString("\nHidden=%1").arg(d->ck_auto_load->isChecked() ? "false\n" : "true\n").toUtf8());
+	}
+#endif
 }
 
 void OptionsTabApplication::restoreOptions()
@@ -164,6 +196,21 @@ void OptionsTabApplication::restoreOptio
 		d->cb_lang->setCurrentIndex( 0 );
 	else if(!curLang.isEmpty() && lang.contains(curLang) )
 		d->cb_lang->setCurrentIndex( d->cb_lang->findText(vList.get(curLang)) );
+
+	//Auto-load
+#ifdef Q_OS_WIN
+	QSettings set(regString, QSettings::NativeFormat);
+	const QString path = set.value(ApplicationInfo::name()).toString();
+	d->ck_auto_load->setChecked( (path == QDir::toNativeSeparators(qApp->applicationFilePath())) );
+#endif
+#ifdef HAVE_X11
+	QFile desktop(QDir::homePath() + psiAutoStart);
+	if (desktop.open(QIODevice::ReadOnly)
+		&& QString(desktop.readAll()).contains(QRegExp("\\bhidden\\s*=\\s*false", Qt::CaseInsensitive)))
+	{
+		d->ck_auto_load->setChecked(true);
+	}
+#endif
 }
 
 void OptionsTabApplication::doEnableQuitOnClose(int state)
--- psi.orig/src/options/opt_application.ui
+++ psi/src/options/opt_application.ui
@@ -14,6 +14,13 @@
   </property>
   <layout class="QVBoxLayout" >
    <item>
+    <widget class="QCheckBox" name="ck_auto_load">
+     <property name="text">
+      <string>Automatically launch application when OS starts</string>
+     </property>
+    </widget>
+   </item>
+   <item>
     <widget class="QCheckBox" name="ck_docklet" >
      <property name="text" >
       <string>Enable docklet</string>
