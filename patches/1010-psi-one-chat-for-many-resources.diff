--- a/options/default.xml
+++ b/options/default.xml
@@ -125,6 +125,8 @@
 				<status-with-priority comment="Show priority with status change" type="bool">false</status-with-priority>
 				<log-height type="int">325</log-height>
 				<chatedit-height type="int">10</chatedit-height>
+				<default-jid-mode comment="Default jid mode: barejid | auto" type="QString">barejid</default-jid-mode>
+				<default-jid-mode-ignorelist comment="Default autojid mode ignore list: jid1,jid2,..." type="QString"></default-jid-mode-ignorelist>
 			</chat>
 			<save>
 				<toolbars-state type="QByteArray"/>
--- a/src/chatdlg.cpp
+++ b/src/chatdlg.cpp
@@ -107,6 +107,14 @@ ChatDlg::ChatDlg(const Jid& jid, PsiAccount* pa, TabManager* tabManager)
 
 	status_ = -1;
 
+	autoSelectContact_ = false;
+	if (PsiOptions::instance()->getOption("options.ui.chat.default-jid-mode").toString() == "auto") {
+		UserListItem *uli = account()->findFirstRelevant(jid);
+		if (!uli || (!uli->isPrivate() && (jid.resource().isEmpty() || uli->userResourceList().count() <= 1))) {
+			autoSelectContact_ = true;
+		}
+	}
+
 	// Message events
 	contactChatState_ = XMPP::StateNone;
 	lastChatState_ = XMPP::StateNone;
@@ -389,18 +397,7 @@ const QString& ChatDlg::getDisplayName()
 	return dispNick_;
 }
 
-struct UserStatus {
-	UserStatus()
-			: userListItem(0)
-			, statusType(XMPP::Status::Offline) {}
-	UserListItem* userListItem;
-	XMPP::Status::Type statusType;
-	QString status;
-	int priority;
-	QString publicKeyID;
-};
-
-UserStatus userStatusFor(const Jid& jid, QList<UserListItem*> ul, bool forceEmptyResource)
+UserStatus ChatDlg::userStatusFor(const Jid& jid, QList<UserListItem*> ul, bool forceEmptyResource)
 {
 	if (ul.isEmpty())
 		return UserStatus();
@@ -459,12 +456,20 @@ void ChatDlg::updateContact(const Jid &j, bool fromPresence)
 	if (jid().compare(j, false)) {
 		QList<UserListItem*> ul = account()->findRelevant(j);
 		UserStatus userStatus = userStatusFor(jid(), ul, false);
+
+		Jid oldJid = jid();
+		updateJidWidget(ul, userStatus.statusType, fromPresence);
+		bool jidSwitched = !oldJid.compare(jid(), true);
+		if (jidSwitched) {
+			userStatus = userStatusFor(jid(), ul, false);
+		}
+
 		if (userStatus.statusType == XMPP::Status::Offline)
 			contactChatState_ = XMPP::StateNone;
 
 		bool statusWithPriority = PsiOptions::instance()->getOption("options.ui.chat.status-with-priority").toBool();
 		bool statusChanged = false;
-		if (status_ != userStatus.statusType || statusString_ != userStatus.status || (statusWithPriority && priority_ != userStatus.priority)) {
+		if (jidSwitched || status_ != userStatus.statusType || statusString_ != userStatus.status || (statusWithPriority && priority_ != userStatus.priority)) {
 			statusChanged = true;
 			status_ = userStatus.statusType;
 			statusString_ = userStatus.status;
@@ -502,6 +507,13 @@ void ChatDlg::updateContact(const Jid &j, bool fromPresence)
 	}
 }
 
+void ChatDlg::updateJidWidget(const QList<UserListItem*> &ul, int status, bool fromPresence)
+{
+	Q_UNUSED(ul);
+	Q_UNUSED(status);
+	Q_UNUSED(fromPresence);
+}
+
 void ChatDlg::contactUpdated(UserListItem* u, int status, const QString& statusString)
 {
 	Q_UNUSED(u);
--- a/src/chatdlg.h
+++ b/src/chatdlg.h
@@ -48,6 +48,17 @@ class QDragEnterEvent;
 class ChatView;
 class ChatEdit;
 
+struct UserStatus {
+	UserStatus()
+			: userListItem(0)
+			, statusType(XMPP::Status::Offline) {}
+	UserListItem* userListItem;
+	XMPP::Status::Type statusType;
+	QString status;
+	int priority;
+	QString publicKeyID;
+};
+
 class ChatDlg : public TabbableWidget
 {
 	Q_OBJECT
@@ -76,6 +87,8 @@ public:
 	PsiAccount* account() const;
 	void setInputText(const QString &text);
 	Jid realJid() const;
+	bool autoSelectContact() const {return autoSelectContact_;};
+	static UserStatus userStatusFor(const Jid& jid, QList<UserListItem*> ul, bool forceEmptyResource);
 
 signals:
 	void aInfo(const Jid &);
@@ -100,6 +113,7 @@ protected:
 	void dropEvent(QDropEvent* event);
 	void dragEnterEvent(QDragEnterEvent* event);
 	bool eventFilter(QObject *obj, QEvent *event);
+	bool autoSelectContact_;
 
 public slots:
 	// reimplemented
@@ -151,6 +165,7 @@ protected:
 
 	virtual void initUi() = 0;
 	virtual void capsChanged();
+	virtual void updateJidWidget(const QList<UserListItem*> &ul, int status, bool fromPresence);
 	virtual void contactUpdated(UserListItem* u, int status, const QString& statusString);
 
 	void appendMessage(const Message &, bool local = false);
--- a/src/chatdlg.ui
+++ b/src/chatdlg.ui
@@ -64,10 +64,22 @@
           </widget>
          </item>
          <item>
-          <widget class="QLineEdit" name="le_jid">
-           <property name="readOnly">
+          <widget class="QComboBox" name="le_jid">
+           <property name="sizePolicy">
+            <sizepolicy hsizetype="Preferred" vsizetype="Fixed">
+             <horstretch>1</horstretch>
+             <verstretch>0</verstretch>
+            </sizepolicy>
+           </property>
+           <property name="editable">
             <bool>true</bool>
            </property>
+           <property name="sizeAdjustPolicy">
+            <enum>QComboBox::AdjustToMinimumContentsLengthWithIcon</enum>
+           </property>
+           <property name="minimumContentsLength">
+            <number>10</number>
+           </property>
           </widget>
          </item>
          <item>
@@ -363,6 +375,15 @@
    <header>iconlabel.h</header>
   </customwidget>
  </customwidgets>
+ <tabstops>
+  <tabstop>le_jid</tabstop>
+  <tabstop>tb_voice</tabstop>
+  <tabstop>tb_pgp</tabstop>
+  <tabstop>tb_emoticons</tabstop>
+  <tabstop>tb_actions</tabstop>
+  <tabstop>mle</tabstop>
+  <tabstop>pb_send</tabstop>
+ </tabstops>
  <resources/>
  <connections/>
 </ui>
--- a/src/psiaccount.cpp
+++ b/src/psiaccount.cpp
@@ -2716,9 +2716,9 @@ void PsiAccount::processIncomingMessage(const Message &_m)
 	else
 		j = ul.first()->jid();
 
-	c = findChatDialog(j);
+	/*c = findChatDialog(j);
 	if(!c)
-		c = findChatDialog(m.from().full());
+		c = findChatDialog(m.from().full());*/
 
 	if(m.type() == "error") {
 		Stanza::Error err = m.error();
@@ -2750,6 +2750,13 @@ void PsiAccount::processIncomingMessage(const Message &_m)
 			else if (type == "chat")
 				m.setType("chat");
 			else if (type == "current-open") {
+				c = NULL;
+				foreach (ChatDlg *cl, findChatDialogs(m.from(), false)) {
+					if (cl->autoSelectContact() || cl->jid().resource().isEmpty() || m.from().resource() == cl->jid().resource()) {
+						c = cl;
+						break;
+					}
+				}
 				if (c != NULL && !c->isHidden())
 					m.setType("chat");
 				else
@@ -3204,9 +3211,33 @@ bool PsiAccount::validRosterExchangeItem(const RosterExchangeItem& item)
 	return false;
 }
 
-ChatDlg* PsiAccount::findChatDialog(const Jid& jid) const
+ChatDlg* PsiAccount::findChatDialog(const Jid& jid, bool compareResource) const
+{
+	return findDialog<ChatDlg*>(jid, compareResource);
+}
+
+ChatDlg* PsiAccount::findChatDialogEx(const Jid& jid) const
+{
+	ChatDlg* cm1 = NULL;
+	ChatDlg* cm2 = NULL;
+	foreach (ChatDlg *cl, findChatDialogs(jid, false)) {
+		if (cl->autoSelectContact())
+			return cl;
+		if (!cm1 && jid.resource() == cl->jid().resource()) {
+				cm1 = cl;
+				continue;
+		}
+		if (!cm2 && cl->jid().resource().isEmpty())
+			cm2 = cl;
+	}
+	if (cm1)
+		return cm1;
+	return cm2;
+}
+
+QList<ChatDlg*> PsiAccount::findChatDialogs(const Jid& jid, bool compareResource) const
 {
-	return findDialog<ChatDlg*>(jid, true);
+	return findDialogs<ChatDlg*>(jid, compareResource);
 }
 
 QWidget* PsiAccount::findDialog(const QMetaObject& mo, const Jid& jid, bool compareResource) const
@@ -3721,7 +3752,8 @@ EventDlg *PsiAccount::ensureEventDlg(const Jid &j)
 
 ChatDlg *PsiAccount::ensureChatDlg(const Jid &j)
 {
-	ChatDlg *c = findChatDialog(j);
+	/*ChatDlg *c = findChatDialog(j);*/
+	ChatDlg *c = findChatDialogEx(j);
 	if(!c) {
 		// create the chatbox
 		c = ChatDlg::create(j, this, d->tabManager);
@@ -3739,6 +3771,7 @@ ChatDlg *PsiAccount::ensureChatDlg(const Jid &j)
 #endif
 	}
 	else {
+		c->setJid(j);
 		// on X11, do a special reparent to open on the right desktop
 #ifdef HAVE_X11
 		/* KIS added an exception for tabs here. We do *not* want chats flying
@@ -4927,12 +4960,12 @@ void PsiAccount::handleEvent(const PsiEvent::Ptr &e, ActivationType activationTy
 		}
 		else if (m.messageReceipt() == ReceiptReceived) {
 			if (o->getOption("options.ui.notifications.request-receipts").toBool()) {
-				ChatDlg *c = findChatDialog(e->from());
-				if (!c) {
-					c = findChatDialog(e->jid());
-				}
-				if (c) {
-					c->incomingMessage(m);
+				foreach (ChatDlg *c, findChatDialogs(e->from(), false)) {
+					if (c->autoSelectContact()  || c->jid().resource().isEmpty() || e->from().resource() == c->jid().resource()) {
+						if (c->autoSelectContact())
+							c->setJid(e->from());
+						c->incomingMessage(m);
+					}
 				}
 			}
 			return;
@@ -4941,11 +4974,9 @@ void PsiAccount::handleEvent(const PsiEvent::Ptr &e, ActivationType activationTy
 		// Pass message events to chat window
 		if ((m.containsEvents() || m.chatState() != StateNone) && m.body().isEmpty()) {
 			if (o->getOption("options.messages.send-composing-events").toBool()) {
-				ChatDlg *c = findChatDialog(e->from());
-				if (!c) {
-					c = findChatDialog(e->jid());
-				}
+				ChatDlg *c = findChatDialogEx(e->from());
 				if (c) {
+					c->setJid(e->from());
 					c->incomingMessage(m);
 				}
 			}
@@ -4961,11 +4992,8 @@ void PsiAccount::handleEvent(const PsiEvent::Ptr &e, ActivationType activationTy
 
 		// pass chat messages directly to a chat window if possible (and deal with sound)
 		else if(m.type() == "chat") {
-			ChatDlg *c = findChatDialog(e->from());
-			if(!c)
-				c = findChatDialog(e->jid());
-
-			if(c)
+			ChatDlg *c = findChatDialogEx(e->from());
+			if (c)
 				c->setJid(e->from());
 
 			//if the chat exists, and is either open in a tab,
@@ -5436,12 +5464,12 @@ void PsiAccount::messageStanzasAcked(int n) {
 void PsiAccount::processChatsHelper(const Jid& j, bool removeEvents)
 {
 	//printf("processing chats for [%s]\n", j.full().latin1());
-	ChatDlg *c = findChatDialog(j);
+	ChatDlg *c = findChatDialogEx(j);
 	if(!c)
 		return;
 	// extract the chats
 	QList<PsiEvent::Ptr> chatList;
-	bool compareResources = true;
+	bool compareResources = !c->autoSelectContact();
 #ifdef YAPSI
 	compareResources = false;
 #endif
--- a/src/psiaccount.h
+++ b/src/psiaccount.h
@@ -162,7 +162,9 @@ public:
 	QHostAddress *localAddress() const;
 	void passwordReady(QString password);
 
-	ChatDlg* findChatDialog(const Jid& jid) const;
+	ChatDlg* findChatDialog(const Jid& jid, bool compareResource = true) const;
+	ChatDlg* findChatDialogEx(const Jid& jid) const;
+	QList<ChatDlg*> findChatDialogs(const Jid& jid, bool compareResource = true) const;
 
 	template<typename T>
 	inline T findDialog(const Jid& jid = Jid(), bool compareResource = true) const {
--- a/src/psichatdlg.cpp
+++ b/src/psichatdlg.cpp
@@ -182,6 +182,28 @@ PsiChatDlg::PsiChatDlg(const Jid& jid, PsiAccount* pa, TabManager* tabManager)
 void PsiChatDlg::initUi()
 {
 	ui_.setupUi(this);
+
+	le_autojid = new ActionLineEdit(ui_.le_jid);
+	ui_.le_jid->setLineEdit(le_autojid);
+	ui_.le_jid->lineEdit()->setReadOnly(true);
+	if (autoSelectContact_) {
+		QStringList excl = PsiOptions::instance()->getOption("options.ui.chat.default-jid-mode-ignorelist").toString().toLower().split(",", QString::SkipEmptyParts);
+		if (excl.indexOf(jid().bare()) == -1) {
+			ui_.le_jid->insertItem(0, "auto", jid().full());
+			ui_.le_jid->setCurrentIndex(0);
+		} else {
+			autoSelectContact_ = false;
+		}
+	}
+	connect(ui_.le_jid, SIGNAL(activated(int)), this, SLOT(contactChanged()));
+	UserListItem *ul = account()->findFirstRelevant(jid());
+	if (!ul || !ul->isPrivate()) {
+		act_autojid = new IconAction(this);
+		updateAutojidIcon();
+		connect(act_autojid, SIGNAL(triggered()), SLOT(doSwitchJidMode()));
+		le_autojid->addAction(act_autojid);
+	}
+
 	ui_.lb_ident->setAccount(account());
 	ui_.lb_ident->setShowJid(false);
 
@@ -517,6 +539,110 @@ void PsiChatDlg::setContactToolTip(QString text)
 	ui_.avatar->setToolTip(text);
 }
 
+void PsiChatDlg::updateJidWidget(const QList<UserListItem*> &ul, int status, bool fromPresence)
+{
+	static bool internal_change = false;
+	if (!internal_change) {
+		// Filling jid's combobox
+		const UserListItem *u = ul.first();
+		if (!u)
+			return;
+		UserResourceList resList = u->userResourceList();
+		const QString name = u->name();
+		QComboBox *jidCombo = ui_.le_jid;
+		if (!u->isPrivate()) {
+			// If no conference private chat
+			const int combo_idx = jidCombo->currentIndex();
+			Jid old_jid = (combo_idx != -1) ? Jid(jidCombo->itemData(combo_idx).toString()) : Jid();
+			//if (fromPresence || jid() != old_jid) {
+				bool auto_mode = autoSelectContact_;
+				Jid new_auto_jid = jid();
+				if (auto_mode) {
+					if (fromPresence && !resList.isEmpty()) {
+						UserResourceList::ConstIterator it = resList.priority();
+						new_auto_jid = jid().withResource((*it).name());
+					}
+				}
+				// Filling address combobox
+				QString iconStr = "clients/unknown";
+				const int resCnt = resList.size();
+				if (resCnt == 1) {
+					UserResourceList::ConstIterator it = resList.begin();
+					if (it != resList.end() && (*it).name().isEmpty())
+						// Empty resource,  but online. Transport?
+						iconStr = "clients/" + u->findClient((*it).clientName().toLower());
+				} else if (resCnt == 0) {
+					iconStr = QString();
+				}
+				setJidComboItem(0, makeContactName(name, u->jid().bare()), u->jid().bare(), iconStr);
+				int new_index = -1;
+				int curr_index = 1;
+				for (UserResourceList::ConstIterator it = resList.begin(); it != resList.end(); it++) {
+					UserResource r = *it;
+					if (!r.name().isEmpty()) {
+						Jid tmp_jid(u->jid().withResource(r.name()));
+						QString iconStr2 = "clients/" + u->findClient(r.clientName().toLower());
+						setJidComboItem(curr_index, makeContactName(name, tmp_jid), tmp_jid, iconStr2);
+						if (new_index == -1 && tmp_jid == new_auto_jid) {
+							new_index = curr_index;
+						}
+						curr_index++;
+					}
+				}
+				if (new_index == -1) {
+					new_index = 0;
+					if (autoSelectContact_) {
+						new_auto_jid = jid().bare();
+					} else {
+						if (!jid().resource().isEmpty()) {
+							new_index = jidCombo->count();
+							setJidComboItem(curr_index, makeContactName(name, jid()), jid(), iconStr);
+							new_index = curr_index++;
+						}
+					}
+				}
+				// Сlean combobox's tail
+				while (curr_index < jidCombo->count())
+					jidCombo->removeItem(curr_index);
+
+				ui_.le_jid->setCurrentIndex(new_index);
+				if (new_auto_jid != jid()) {
+					internal_change = true;
+					setJid(new_auto_jid);
+					if (old_jid != new_auto_jid) {
+						if (autoSelectContact_ && (status != XMPP::Status::Offline || !new_auto_jid.resource().isEmpty())) {
+							appendSysMsg(tr("Contact has been switched: %1").arg(TextUtil::escape(JIDUtil::toString(new_auto_jid, true))));
+						}
+					}
+				}
+			//}
+		} else {
+			// Conference private chat
+			QString iconStr;
+			Jid tmp_jid = jid();
+			UserResourceList::ConstIterator it = resList.begin();
+			if (it != resList.end()) {
+				iconStr = "clients/" + u->findClient((*it).clientName().toLower());
+				tmp_jid = u->jid().withResource((*it).name());
+			} else if (jidCombo->count() > 0) {
+				tmp_jid = Jid(jidCombo->itemData(0).toString());
+			}
+			if (tmp_jid.isValid()) {
+				if (iconStr == "clients/unknown")
+					iconStr = QString(); // for disable the icon
+				setJidComboItem(0, makeContactName(name, tmp_jid), tmp_jid, iconStr);
+			}
+			// Clean combobox's tail
+			while (jidCombo->count() > 1)
+				jidCombo->removeItem(1);
+			//-
+			jidCombo->setCurrentIndex(0);
+		}
+		jidCombo->setToolTip(jidCombo->currentText());
+	}
+	internal_change = false;
+}
+
 void PsiChatDlg::contactUpdated(UserListItem* u, int status, const QString& statusString)
 {
 	Q_UNUSED(statusString);
@@ -547,22 +673,6 @@ void PsiChatDlg::contactUpdated(UserListItem* u, int status, const QString& stat
 	}
 
 	if (u) {
-		QString name;
-		QString j;
-		if (jid().resource().isEmpty())
-			j = JIDUtil::toString(u->jid(), true);
-		else
-			j = JIDUtil::toString(u->jid().bare(), false) + '/' + jid().resource();
-
-		if (!u->name().isEmpty())
-			name = u->name() + QString(" <%1>").arg(j);
-		else
-			name = j;
-
-		ui_.le_jid->setText(name);
-		ui_.le_jid->setCursorPosition(0);
-		ui_.le_jid->setToolTip(name);
-
 		UserResourceList srl = u->userResourceList();
 		if(!srl.isEmpty()) {
 			UserResource r;
@@ -812,4 +922,76 @@ void PsiChatDlg::setMargins()
 	}
 }
 
+QString PsiChatDlg::makeContactName(const QString &name, const Jid &jid) const
+{
+	QString name_;
+	QString j = JIDUtil::toString(jid, true);
+	if (!name.isEmpty())
+		name_ = name + QString(" <%1>").arg(j);
+	else
+		name_ = j;
+	return name_;
+}
+
+void PsiChatDlg::contactChanged()
+{
+	int curr_index = ui_.le_jid->currentIndex();
+	Jid jid_(ui_.le_jid->itemData(curr_index).toString());
+	if (jid_ != jid()) {
+		autoSelectContact_ = false;
+		setJid(jid_);
+		updateAutojidIcon();
+	}
+}
+
+void PsiChatDlg::updateAutojidIcon()
+{
+	QIcon icon(IconsetFactory::iconPixmap("psi/autojid"));
+	QPixmap pix;
+	QString text;
+	if (autoSelectContact_) {
+		pix = icon.pixmap(QSize(16, 16), QIcon::Normal, QIcon::Off);
+		text = tr("turn off autojid");
+	} else {
+		pix = icon.pixmap(QSize(16, 16), QIcon::Disabled, QIcon::Off);
+		text = tr("turn on autojid");
+	}
+	act_autojid->setIcon(QIcon(pix));
+	act_autojid->setText(text);
+	act_autojid->setToolTip(text);
+	act_autojid->setStatusTip(text);
+}
+
+void PsiChatDlg::setJidComboItem(int pos, const QString &text, const Jid &jid, const QString &icon_str)
+{
+	// Warning! If pos >= items count, the element will be added in a list tail
+	//-
+	QIcon icon;
+	QComboBox *jid_combo = ui_.le_jid;
+	if (!icon_str.isEmpty()) {
+		const PsiIcon picon = IconsetFactory::icon(icon_str);
+		icon = picon.icon();
+	}
+	if (jid_combo->count() > pos) {
+		jid_combo->setItemText(pos, text);
+		jid_combo->setItemData(pos, JIDUtil::toString(jid, true));
+		jid_combo->setItemIcon(pos, icon);
+	} else {
+		jid_combo->addItem(icon, text, JIDUtil::toString(jid, true));
+	}
+}
+
+void PsiChatDlg::doSwitchJidMode()
+{
+	autoSelectContact_ = ! autoSelectContact_;
+	updateAutojidIcon();
+	if (autoSelectContact_) {
+		const QList<UserListItem*> ul = account()->findRelevant(jid().bare());
+		UserStatus userStatus = userStatusFor(jid(), ul, false);
+		updateJidWidget(ul, userStatus.statusType, true);
+		userStatus = userStatusFor(jid(), ul, false);
+		contactUpdated(userStatus.userListItem, userStatus.statusType, userStatus.status);
+	}
+}
+
 #include "psichatdlg.moc"
--- a/src/psichatdlg.h
+++ b/src/psichatdlg.h
@@ -11,6 +11,8 @@
 #include "ui_chatdlg.h"
 #include "typeaheadfind.h"
 #include "psiwindowheader.h"
+#include "widgets/actionlineedit.h"
+
 
 class IconAction;
 class PsiContact;
@@ -46,6 +48,9 @@ private slots:
 	void updateContactAdding(PsiContact* c = 0);
 	void updateContactAdding(const Jid &j);
 	void verticalSplitterMoved(int, int);
+	void contactChanged();
+	QString makeContactName(const QString &name, const Jid &jid) const;
+	void doSwitchJidMode();
 
 	// reimplemented
 	void chatEditCreated();
@@ -58,6 +63,7 @@ private:
 	void initUi();
 	void capsChanged();
 	bool isEncryptionEnabled() const;
+	void updateJidWidget(const QList<UserListItem*> &ul, int status, bool fromPresence);
 	void contactUpdated(UserListItem* u, int status, const QString& statusString);
 	void updateAvatar();
 	void optionsUpdate();
@@ -70,6 +76,8 @@ private:
 	ChatView* chatView() const;
 	ChatEdit* chatEdit() const;
 	void setMargins();
+	void updateAutojidIcon();
+	void setJidComboItem(int pos, const QString &text, const Jid &jid, const QString &icon_str);
 
 private:
 	Ui::ChatDlg ui_;
@@ -92,6 +100,9 @@ private:
 	QAction *act_minimize_;
 	TypeAheadFindBar *typeahead_;
 
+	ActionLineEdit *le_autojid;
+	IconAction *act_autojid;
+
 	MCmdManager mCmdManager_;
 	MCmdSimpleSite mCmdSite_;
 
--- a/src/psicon.cpp
+++ b/src/psicon.cpp
@@ -1724,9 +1724,9 @@ void PsiCon::processEvent(const PsiEvent::Ptr &e, ActivationType activationType)
 		if ( PsiOptions::instance()->getOption("options.ui.chat.alert-for-already-open-chats").toBool() && sentToChatWindow ) {
 			// Message already displayed, need only to pop up chat dialog, so that
 			// it will be read (or marked as read)
-			ChatDlg *c = account->findChatDialog(from);
+			ChatDlg *c = account->findChatDialogEx(from);
 			if(!c)
-				c = account->findChatDialog(e->jid());
+				c = account->findChatDialogEx(e->jid());
 			if(!c)
 				return; // should never happen
 
