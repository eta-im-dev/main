--- a/options/default.xml
+++ b/options/default.xml
@@ -456,6 +456,7 @@ QLineEdit#le_status_text {
 				</sounds>
 				<successful-subscription type="bool">true</successful-subscription>
 			</notifications>
+			<decorate-windows type="bool">true</decorate-windows>
 			<service-discovery>
 				<automatically-get-info type="bool">false</automatically-get-info>
 				<automatically-get-items type="bool">false</automatically-get-items>
--- a/src/groupchatdlg.cpp
+++ b/src/groupchatdlg.cpp
@@ -84,6 +84,7 @@
 #include "mcmdmanager.h"
 #include "lastactivitytask.h"
 #include "psirichtext.h"
+#include "psiwindowheader.h"
 
 #include "mcmdsimplesite.h"
 
@@ -238,9 +239,13 @@ public:
 
 	int logSize;
 	int rosterSize;
+
 public:
 	bool trackBar;
 
+	bool tabmode;
+	PsiWindowHeader *winHeader_;
+
 public:
 	ChatEdit* mle() const { return dlg->ui_.mle->chatEdit(); }
 	ChatView* te_log() const { return dlg->ui_.log; }
@@ -623,6 +628,14 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, const Jid &j, TabManager *tabManager)
 	ui_.lb_ident->setAccount(account());
 	ui_.lb_ident->setShowJid(false);
 	ui_.log->setSessionData(true, jid().full(), jid().full()); //FIXME change conference name
+	d->tabmode = PsiOptions::instance()->getOption("options.ui.tabs.use-tabs").toBool();
+	setWindowBorder(PsiOptions::instance()->getOption("options.ui.decorate-windows").toBool());
+	if (!d->tabmode && !isBorder()) {
+		d->winHeader_ = new PsiWindowHeader(this);
+		ui_.vboxLayout1->insertWidget(0, d->winHeader_);
+	}
+	setMargins();
+
 #ifdef WEBKIT
 	ui_.log->setAccount(account());
 #endif
@@ -2039,6 +2052,25 @@ void GCMainDlg::resizeEvent(QResizeEvent *e)
 	QTimer::singleShot(0, this, SLOT(horizSplitterMoved()));
 }
 
+void GCMainDlg::setMargins()
+{
+	ui_.vboxLayout->setContentsMargins(0,0,0,0);
+	ui_.vboxLayout2->setContentsMargins(4,0,4,4);
+	if (!d->tabmode) {
+		ui_.hboxLayout->setContentsMargins(4,0,4,0);
+		if (!isBorder()) {
+			ui_.vboxLayout1->setContentsMargins(0,0,0,0);
+		}
+		else {
+			ui_.vboxLayout1->setContentsMargins(0,4,0,0);
+		}
+	}
+	else {
+		ui_.vboxLayout1->setContentsMargins(4,4,4,0);
+		ui_.hboxLayout->setContentsMargins(2,0,4,0);
+	}
+}
+
 //----------------------------------------------------------------------------
 // GCFindDlg
 //----------------------------------------------------------------------------
--- a/src/groupchatdlg.h
+++ b/src/groupchatdlg.h
@@ -163,6 +163,8 @@ private:
 
 	void contextMenuEvent(QContextMenuEvent *);
 
+	void setMargins();
+
 };
 
 class GCFindDlg : public QDialog
--- a/src/mainwin.cpp
+++ b/src/mainwin.cpp
@@ -146,6 +146,8 @@ public:
 	QTimer *hideTimer;
 	int hideTimerInterval; //interval in sec
 	bool useAutohide;
+	bool isHide;
+
 
 #ifdef Q_OS_WIN
 	DWORD deactivationTickCount;
@@ -570,6 +572,8 @@ MainWin::MainWin(bool _onTop, bool _asTool, PsiCon* psi)
 	d->hideTimerInterval = PsiOptions::instance()->getOption("options.contactlist.autohide-interval").toInt();
 	d->hideTimer->setInterval(d->hideTimerInterval*1000);
 	optionChanged("options.contactlist.use-autohide");
+	setWindowBorder(PsiOptions::instance()->getOption("options.ui.decorate-windows").toBool());
+	setMouseTracking(!isBorder());
 }
 
 MainWin::~MainWin()
@@ -624,6 +628,11 @@ void MainWin::optionChanged(const QString& option)
 		if(d->useAutohide)
 			d->hideTimer->start();
 	}
+	else if (option == "options.ui.decorate-windows") {
+		setWindowBorder(PsiOptions::instance()->getOption("options.ui.decorate-windows").toBool());
+		setMouseTracking(!isBorder());
+		show();
+	}
 }
 
 void MainWin::hideTimerTimeout()
@@ -793,13 +802,19 @@ void MainWin::setWindowOpts(bool _onTop, bool _asTool)
 	d->onTop = _onTop;
 	d->asTool = _asTool;
 
-	Qt::WindowFlags flags = 0;
+	Qt::WindowFlags flags = windowFlags();
 	if(d->onTop) {
 		flags |= Qt::WindowStaysOnTopHint;
 	}
+	else {
+		flags &= ~Qt::WindowStaysOnTopHint;
+	}
 	if(d->asTool) {
 		flags |= Qt::Tool | TOOLW_FLAGS;
 	}
+	else {
+		flags &= ~Qt::Tool;
+	}
 
 	setWindowFlags(flags);
 	show();
@@ -1729,6 +1744,7 @@ void MainWin::statusClicked(int x)
 {
 	if(x == Qt::MidButton) {
 		recvNextEvent();
+		d->isHide = false;
 	}
 }
 
@@ -1982,4 +1998,32 @@ void MainWin::resizeEvent(QResizeEvent *e)
 	}
 }
 
+void MainWin::mousePressEvent(QMouseEvent *e)
+{
+	if (e->button() == Qt::MidButton && !isBorder()) {
+		d->isHide = true;
+	}
+
+	AdvancedWidget<QMainWindow>::mousePressEvent(e);
+}
+
+void MainWin::mouseReleaseEvent(QMouseEvent *e)
+{
+	if (e->button() == Qt::MidButton && !isBorder() && d->isHide) {
+		d->isHide = false;
+		if (e->globalPos().x() >= geometry().left()
+			&& e->globalPos().x() <= geometry().right()
+			&& e->globalPos().y() >= geometry().top()
+			&& e->globalPos().y() <= geometry().bottom()){
+			if (d->asTool){
+				d->mainWin->trayHide();
+			} else {
+				setWindowState(windowState() | Qt::WindowMinimized);
+			}
+		}
+	}
+
+	AdvancedWidget<QMainWindow>::mouseReleaseEvent(e);
+}
+
 //#endif
--- a/src/mainwin.h
+++ b/src/mainwin.h
@@ -26,6 +26,7 @@
 #include <QList>
 #include <QString>
 #include <QStringList>
+#include <QMouseEvent>
 
 #include "advwidget.h"
 #include "xmpp_status.h"
@@ -84,6 +85,8 @@ protected:
 #ifdef Q_OS_WIN
 	bool winEvent(MSG *, long *);
 #endif
+	void mousePressEvent(QMouseEvent *e);
+	void mouseReleaseEvent(QMouseEvent *e);
 
 signals:
 	void statusChanged(XMPP::Status::Type);
--- a/src/options/opt_application.cpp
+++ b/src/options/opt_application.cpp
@@ -43,7 +43,9 @@ QWidget *OptionsTabApplication::widget()
 
 	w = new OptApplicationUI();
 	OptApplicationUI *d = (OptApplicationUI *)w;
-
+	d->ck_winDecor->setWhatsThis(
+		tr("Set or remove window decorations for roster and chats."
+		" For chats there are special header with close, hide and maximize buttons"));
 	// docklet
 	d->ck_docklet->setWhatsThis(
 		tr("Makes Psi use a docklet icon, also known as system tray icon."));
@@ -90,6 +92,7 @@ void OptionsTabApplication::applyOptions()
 	OptApplicationUI *d = (OptApplicationUI *)w;
 
 	PsiOptions::instance()->setOption("options.ui.contactlist.quit-on-close", d->ck_quitOnClose->isChecked());
+	PsiOptions::instance()->setOption("options.ui.decorate-windows", d->ck_winDecor->isChecked());
 
 	// Auto-update
 	PsiOptions::instance()->setOption("options.auto-update.check-on-startup", d->ck_autoUpdate->isChecked());
@@ -134,6 +137,7 @@ void OptionsTabApplication::restoreOptions()
 
 	d->ck_autoUpdate->setChecked(PsiOptions::instance()->getOption("options.auto-update.check-on-startup").toBool());
 	d->ck_quitOnClose->setChecked(PsiOptions::instance()->getOption("options.ui.contactlist.quit-on-close").toBool());
+	d->ck_winDecor->setChecked(PsiOptions::instance()->getOption("options.ui.decorate-windows").toBool());
 
 	// docklet
 	d->ck_docklet->setChecked( PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool() );
--- a/src/options/opt_application.ui
+++ b/src/options/opt_application.ui
@@ -24,6 +24,16 @@
     </widget>
    </item>
    <item>
+    <widget class="QCheckBox" name="ck_winDecor" >
+     <property name="text" >
+      <string>Decorate windows</string>
+     </property>
+     <property name="checked" >
+      <bool>true</bool>
+     </property>
+    </widget>
+   </item>
+   <item>
     <widget class="QGroupBox" name="gb_docklet" >
      <property name="title" >
       <string>Docklet</string>
@@ -223,6 +233,7 @@
  <layoutdefault spacing="6" margin="11" />
  <tabstops>
   <tabstop>ck_docklet</tabstop>
+  <tabstop>ck_winDecor</tabstop>
   <tabstop>ck_dockDCstyle</tabstop>
   <tabstop>ck_dockHideMW</tabstop>
   <tabstop>ck_dockToolMW</tabstop>
--- a/src/psichatdlg.cpp
+++ b/src/psichatdlg.cpp
@@ -175,6 +175,8 @@ PsiChatDlg::PsiChatDlg(const Jid& jid, PsiAccount* pa, TabManager* tabManager)
 	connect(account(), SIGNAL(removedContact(PsiContact*)), SLOT(updateContactAdding(PsiContact*)));
 	connect(account(), SIGNAL(updateContact(const Jid &)), SLOT(updateContactAdding(const Jid &)));
 	mCmdManager_.registerProvider(new ChatDlgMCmdProvider(this));
+	tabmode = PsiOptions::instance()->getOption("options.ui.tabs.use-tabs").toBool();
+	setWindowBorder(PsiOptions::instance()->getOption("options.ui.decorate-windows").toBool());
 }
 
 void PsiChatDlg::initUi()
@@ -230,6 +232,11 @@ void PsiChatDlg::initUi()
 	act_mini_cmd_->setText(tr("Input command..."));
 	connect(act_mini_cmd_, SIGNAL(triggered()), SLOT(doMiniCmd()));
 	addAction(act_mini_cmd_);
+	if (!tabmode) {
+		winHeader_ = new PsiWindowHeader(this);
+		ui_.vboxLayout1->insertWidget(0, winHeader_);
+	}
+	setMargins();
 
 	ui_.mini_prompt->hide();
 
@@ -458,6 +465,22 @@ void PsiChatDlg::activated()
 	ChatDlg::activated();
 
 	updateCountVisibility();
+
+	bool border = PsiOptions::instance()->getOption("options.ui.decorate-windows").toBool();
+	if (!PsiOptions::instance()->getOption("options.ui.tabs.use-tabs").toBool()){
+		if (!winHeader_.isNull())
+			winHeader_->setVisible(!border);
+		setWindowBorder(border);
+		setMargins();
+#if defined(Q_OS_MAC) || defined(Q_WS_HAIKU)
+		//
+#else
+		bringToFront(true);
+#endif
+	} else {
+		if (!winHeader_.isNull())
+			winHeader_->setVisible(false);
+	}
 }
 
 void PsiChatDlg::setContactToolTip(QString text)
@@ -747,4 +770,23 @@ bool PsiChatDlg::eventFilter( QObject *obj, QEvent *ev ) {
 }
 
 
+void PsiChatDlg::setMargins()
+{
+	ui_.vboxLayout->setContentsMargins(0,0,0,0);
+	ui_.vboxLayout2->setContentsMargins(4,0,4,4);
+	if (!tabmode) {
+		ui_.hboxLayout->setContentsMargins(4,0,4,0);
+		if (!isBorder()) {
+			ui_.vboxLayout1->setContentsMargins(0,0,0,0);
+		}
+		else {
+			ui_.vboxLayout1->setContentsMargins(0,4,0,0);
+		}
+	}
+	else {
+		ui_.vboxLayout1->setContentsMargins(4,4,4,0);
+		ui_.hboxLayout->setContentsMargins(2,0,4,0);
+	}
+}
+
 #include "psichatdlg.moc"
--- a/src/psichatdlg.h
+++ b/src/psichatdlg.h
@@ -10,6 +10,7 @@
 
 #include "ui_chatdlg.h"
 #include "typeaheadfind.h"
+#include "psiwindowheader.h"
 
 class IconAction;
 class PsiContact;
@@ -65,6 +66,7 @@ private:
 	void appendSysMsg(const QString &);
 	ChatView* chatView() const;
 	ChatEdit* chatEdit() const;
+	void setMargins();
 
 private:
 	Ui::ChatDlg ui_;
@@ -100,6 +102,8 @@ private:
 	int unacked_messages;
 
 	static PsiIcon *throbber_icon;
+	bool tabmode;
+	QPointer <PsiWindowHeader> winHeader_;
 };
 
 #endif
--- a/src/tabs/tabdlg.cpp
+++ b/src/tabs/tabdlg.cpp
@@ -167,9 +167,19 @@ TabDlg::TabDlg(TabManager* tabManager, const QString& geometryOption, TabDlgDele
 		delegate_->tabWidgetCreated(this, tabWidget_);
 
 	QVBoxLayout *vert1 = new QVBoxLayout(this);
-	vert1->setMargin(1);
+	//Add windowheader widget if window not decorated
+	if (!PsiOptions::instance()->getOption("options.ui.decorate-windows").toBool()
+		&& !PsiOptions::instance()->getOption("options.ui.tabs.grouping").toString().contains('A')) {
+		winHeader_ = new PsiWindowHeader(this);
+		vert1->addWidget(winHeader_);
+		vert1->setSpacing(0);
+		vert1->setMargin(0);
+	} else {
+		vert1->setMargin(1);
+	}
 	vert1->addWidget(tabWidget_);
 
+
 	setAcceptDrops(true);
 
 	X11WM_CLASS("tabs");
@@ -189,6 +199,7 @@ TabDlg::TabDlg(TabManager* tabManager, const QString& geometryOption, TabDlgDele
 
 	if(!PsiOptions::instance()->getOption("options.ui.tabs.grouping").toString().contains('A'))
 		setGeometryOptionPath(geometryOption);
+	setWindowBorder(PsiOptions::instance()->getOption("options.ui.decorate-windows").toBool());
 }
 
 TabDlg::~TabDlg()
--- a/src/tabs/tabdlg.h
+++ b/src/tabs/tabdlg.h
@@ -29,6 +29,7 @@
 #include "advwidget.h"
 
 #include "tabbablewidget.h"
+#include "psiwindowheader.h"
 
 class PsiCon;
 class ChatTabs;
@@ -169,6 +170,7 @@ private:
 	void extinguishFlashingTabs();
 	void updateCaption();
 	void updateTabBar();
+	PsiWindowHeader *winHeader_;
 };
 
 #endif
--- a/src/tools/advwidget/advwidget.h
+++ b/src/tools/advwidget/advwidget.h
@@ -21,6 +21,7 @@
 #ifndef ADVWIDGET_H
 #define ADVWIDGET_H
 
+#include <QMouseEvent>
 #include <QWidget>
 
 class GAdvancedWidget : public QObject
@@ -65,6 +66,65 @@ class AdvancedWidget : public BaseClass
 {
 private:
 	GAdvancedWidget *gAdvWidget;
+#ifdef Q_OS_WIN
+	Qt::WindowFlags deltaflags;
+#endif
+	QPoint movepath;
+	bool isResize;
+	bool isDrag;
+	bool border;
+	Qt::WindowFrameSection region;
+	void mouseEnterEvent(const int mouse_x, const int mouse_y, const QRect &geom)
+	{
+		const int top = geom.top();
+		const int bottom = geom.bottom();
+		const int left = geom.left();
+		const int right = geom.right();
+		const int delta = 10;
+		const int maxtop = top + delta;
+		const int minbottom = bottom -delta;
+		if(mouse_y <= bottom
+				&& mouse_y >= minbottom
+				&& qAbs(mouse_x - left) < delta) {
+			region = Qt::BottomLeftSection;
+		}
+		else if (mouse_x > (left + delta)
+			 && mouse_x < (right - delta)
+			 && qAbs(mouse_y - bottom) < delta) {
+			region = Qt::BottomSection;
+		}
+		else if ((bottom - mouse_y) < delta
+			     && qAbs(mouse_x - right) < delta){
+			region = Qt::BottomRightSection;
+		}
+		else if ((right - mouse_x) < delta
+			 &&  mouse_y > maxtop
+			 && mouse_y < minbottom) {
+			region = Qt::RightSection;
+		}
+		else if ((mouse_x - left) < delta
+			 &&  mouse_y > maxtop
+			 && mouse_y < minbottom) {
+			region = Qt::LeftSection;
+		}
+		else if ((mouse_y - top) < delta
+			 && mouse_x > (left + delta)
+			 && mouse_x < (right -delta)){
+			region = Qt::TopSection;
+		}
+		else if ((top - mouse_y) < delta
+			 && qAbs(mouse_x - right) < delta){
+
+			region = Qt::TopRightSection;
+		}
+		else if ((top - mouse_y) < delta
+			 && qAbs(mouse_x - left) < delta){
+			region = Qt::TopLeftSection;
+		}
+		else {
+			region = Qt::NoSection;
+		}
+	}
 
 public:
 	AdvancedWidget(QWidget *parent = 0, Qt::WindowFlags f = 0)
@@ -73,6 +133,7 @@ public:
 	{
 		if (f != 0)
 			BaseClass::setWindowFlags(f);
+		border = true;
 		gAdvWidget = new GAdvancedWidget( this );
 	}
 
@@ -151,6 +212,46 @@ public:
 		windowTitleChanged();
 	}
 
+	void setWindowBorder(bool isDecorated)
+	{
+		Qt::WindowFlags flags = BaseClass::windowFlags();
+#ifdef Q_OS_WIN
+		if (deltaflags == 0) {
+			deltaflags = flags;
+		}
+		if (isDecorated) {
+			if (flags != deltaflags) {
+				flags |= Qt::WindowTitleHint;
+				flags &= ~Qt::FramelessWindowHint;
+				deltaflags = 0;
+				if (flags != BaseClass::windowFlags()) {
+					setWindowFlags(flags);
+				}
+			}
+		} else {
+			flags &= ~Qt::WindowTitleHint;
+			flags |= Qt::FramelessWindowHint;
+			if (flags != BaseClass::windowFlags()) {
+				setWindowFlags(flags);
+			}
+
+		}
+#else
+		if (isDecorated) {
+			flags &= ~Qt::FramelessWindowHint;
+		} else {
+			flags |= Qt::FramelessWindowHint;
+		}
+		if (flags != BaseClass::windowFlags()) {
+			setWindowFlags(flags);
+		}
+#endif
+		border = isDecorated;
+	}
+	bool isBorder(){
+		return border;
+	}
+
 protected:
 	virtual void windowTitleChanged()
 	{
@@ -165,6 +266,132 @@ protected:
 		}
 		BaseClass::changeEvent(event);
 	}
+
+protected:
+	void setWindowFlags(Qt::WindowFlags flags){
+		BaseClass::setWindowFlags(flags);
+	}
+	void mousePressEvent(QMouseEvent *event)
+	{
+		QWidget *window = BaseClass::window();
+		if (!border && (event->button()==Qt::LeftButton)) {
+			mouseEnterEvent(event->globalPos().x(), event->globalPos().y(), window->geometry());
+			if (region != Qt::NoSection) {
+				isResize = true;
+			}
+			else{
+				movepath = event->globalPos() - window->pos();
+				isResize = false;
+			}
+			isDrag = true;
+			BaseClass::mousePressEvent(event);
+		}
+	}
+	void mouseMoveEvent(QMouseEvent *event)
+	{
+		bool isLeftButton = (event->buttons() & Qt::LeftButton);
+		const QPoint pg = event->globalPos();
+		QWidget *window = BaseClass::window();
+		int ypath = 0;
+		int xpath = 0;
+		const int right = window->geometry().right();
+		const int left =  window->geometry().left();
+		const int top =  window->geometry().top();
+		const int bottom = window->geometry().bottom();
+		if (isLeftButton && isResize && !border) {
+			switch (region) {
+			case Qt::BottomLeftSection:
+				window->setCursor(QCursor(Qt::SizeBDiagCursor));
+				ypath =  pg.y() - bottom;
+				xpath = left - pg.x();
+				if ((window->width() + xpath) < window->minimumWidth()) {
+					xpath = window->minimumWidth() - window->width();
+				}
+				window->setGeometry(window->x() - xpath, window->y(),
+						    window->width() + xpath, window->height() + ypath);
+				break;
+			case Qt::BottomRightSection:
+				window->setCursor(QCursor(Qt::SizeFDiagCursor));
+				ypath = pg.y() - bottom;
+				xpath = pg.x() - right;
+				window->resize(window->width() + xpath, window->height() + ypath);
+				break;
+			case Qt::TopLeftSection:
+				window->setCursor(QCursor(Qt::SizeFDiagCursor));
+				ypath =  top - pg.y();
+				xpath = left - pg.x();
+				if ((window->width() + xpath) < window->minimumWidth()) {
+					xpath = window->minimumWidth() - window->width();
+				}
+				if ((window->height() + ypath) < window->minimumHeight()) {
+					ypath = window->minimumHeight() - window->height();
+				}
+				window->setGeometry(window->x() - xpath, window->y() - ypath,
+						    window->width() + xpath, window->height() + ypath);
+				break;
+			case Qt::TopRightSection:
+				window->setCursor(QCursor(Qt::SizeBDiagCursor));
+				ypath =  top - pg.y();
+				xpath = pg.x() - right;
+				if ((window->width() + xpath) < window->minimumWidth()) {
+					xpath = window->minimumWidth() - window->width();
+				}
+				if ((window->height() + ypath) < window->minimumHeight()) {
+					ypath = window->minimumHeight() - window->height();
+				}
+				window->setGeometry(window->x(), window->y() - ypath,
+						    window->width() + xpath, window->height() + ypath);
+				break;
+			case Qt::BottomSection:
+				window->setCursor(QCursor(Qt::SizeVerCursor));
+				ypath =  pg.y() - bottom;
+				window->resize(window->width(), window->height() + ypath);
+				break;
+			case Qt::RightSection:
+				window->setCursor(QCursor(Qt::SizeHorCursor));
+				xpath =  pg.x() - right;
+				window->resize(window->width() + xpath, window->height());
+				break;
+			case Qt::LeftSection:
+				window->setCursor(QCursor(Qt::SizeHorCursor));
+				xpath =  left - pg.x();
+				if ((window->width() + xpath) < window->minimumWidth()) {
+					xpath = window->minimumWidth() - window->width();
+				}
+				window->setGeometry(window->x() - xpath, window->y(),
+						    window->width() + xpath, window->height());
+				break;
+			case Qt::TopSection:
+				window->setCursor(QCursor(Qt::SizeVerCursor));
+				ypath =  top - pg.y();
+				if ((window->height() + ypath) < window->minimumHeight()) {
+					ypath = window->minimumHeight() - window->height();
+				}
+				window->setGeometry(window->x(), window->y() - ypath,
+						    window->width(), window->height() + ypath);
+				break;
+			case Qt::NoSection:
+			default:
+				break;
+			}
+		}
+		else if(isLeftButton && isDrag && !isResize && !border) {
+			window->setCursor(QCursor(Qt::ArrowCursor));
+			window->move( event->globalPos() - movepath );
+		}
+		BaseClass::mouseMoveEvent(event);
+	}
+	void mouseReleaseEvent(QMouseEvent *event)
+	{
+		QWidget *window = BaseClass::window();
+		if (!border && (event->button() == Qt::LeftButton) && isDrag) {
+			movepath = QPoint(0,0);
+			isDrag = false;
+			isResize = false;
+			window->setCursor(QCursor(Qt::ArrowCursor));
+			BaseClass::mouseReleaseEvent(event);
+		}
+	}
 };
 
 #endif
new file mode 100644
index 0000000..a48e32a
--- /dev/null
+++ b/src/widgets/psiwindowheader.cpp
@@ -0,0 +1,226 @@
+/*
+ * psiwindowheader.cpp
+ * Copyright (C) 2010  Khryukin Evgeny, Vitaly Tonkacheyev
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
+
+#include <QIcon>
+#include <QDesktopWidget>
+
+#include "psiwindowheader.h"
+#include "psiiconset.h"
+
+PsiWindowHeader::PsiWindowHeader(QWidget *p)
+	: QWidget(p),
+	  maximized(false),
+	  defaultSize(QSize(320, 280))
+{
+	parent_ = p->window();
+	ui_.setupUi(this);
+#ifdef Q_OS_MAC
+	ui_.horiz->insertWidget(0, ui_.closeButton);
+	ui_.horiz->insertWidget(1, ui_.hideButton);
+	ui_.horiz->insertWidget(2, ui_.maximizeButton);
+#endif
+	ui_.hideButton->setIcon(qApp->style()->standardIcon(QStyle::SP_TitleBarMinButton));
+	ui_.maximizeButton->setIcon(qApp->style()->standardIcon(QStyle::SP_TitleBarMaxButton));
+	ui_.closeButton->setIcon(qApp->style()->standardIcon(QStyle::SP_TitleBarCloseButton));
+	setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Minimum);
+
+	connect(ui_.hideButton, SIGNAL(clicked()), SLOT(hidePressed()));
+	connect(ui_.closeButton, SIGNAL(clicked()), SLOT(closePressed()));
+	connect(ui_.maximizeButton, SIGNAL(clicked()), SLOT(maximizePressed()));
+	setMouseTracking(true);
+}
+
+PsiWindowHeader::~PsiWindowHeader()
+{
+}
+
+void PsiWindowHeader::hidePressed()
+{
+	parent_->setWindowState(parent_->windowState() | Qt::WindowMinimized);
+}
+
+void PsiWindowHeader::closePressed()
+{
+	parent_->close();
+}
+
+void PsiWindowHeader::maximizePressed()
+{
+	const QRect desktop = qApp->desktop()->availableGeometry(-1);
+	if (!maximized) {
+		if (parent_->window()->width() != qApp->desktop()->width()
+			&& parent_->window()->height() != qApp->desktop()->height()) {
+			oldSize = parent_->window()->geometry();
+			parent_->window()->setGeometry(desktop);
+			maximized = true;
+		}
+		else if (!oldSize.isNull() && !oldSize.isEmpty()) {
+			parent_->window()->setGeometry(oldSize);
+			maximized = false;
+		}
+		else {
+			parent_->window()->resize(defaultSize);
+			maximized = false;
+		}
+	} else {
+		if (oldSize.top() < desktop.top()) {
+			oldSize.setTop(desktop.top());
+		}
+		if (oldSize.left() < desktop.left() ) {
+			oldSize.setLeft(desktop.left());
+		}
+		if (oldSize.right() > desktop.right()) {
+			oldSize.setRight(desktop.right());
+		}
+		if (oldSize.bottom() > desktop.bottom()) {
+			oldSize.setBottom(desktop.bottom());
+		}
+		parent_->window()->setGeometry(oldSize);
+		maximized = false;
+	}
+}
+
+void PsiWindowHeader::mouseDoubleClickEvent(QMouseEvent *e)
+{
+	if (e->button() == Qt::LeftButton) {
+		maximizePressed();
+		e->accept();
+	}
+}
+
+void PsiWindowHeader::mousePressEvent(QMouseEvent *e)
+{
+	if (e->button() == Qt::LeftButton) {
+		mouseEnterEvent(e->pos().x(),e->pos().y(),geometry());
+		if (inVRect || inLDRect || inRDRect) {
+			isResize = true;
+		}
+		else{
+			movepath = e->pos();
+			isResize = false;
+		}
+		isDrag = true;
+		e->accept();
+	}
+}
+
+void PsiWindowHeader::mouseMoveEvent(QMouseEvent *e)
+{
+	bool isLeftButton = (e->buttons() & Qt::LeftButton);
+	const QPoint pg = e->globalPos();
+	int ypath = 0;
+	int xpath = 0;
+	if (isLeftButton && inLDRect && isResize && !maximized) {
+		setCursor(QCursor(Qt::SizeFDiagCursor));
+		ypath = parent_->window()->y() - pg.y() ;
+		xpath = parent_->window()->x() - pg.x();
+		if ((parent_->window()->width() + xpath) < parent_->window()->minimumWidth()) {
+			xpath = parent_->window()->minimumWidth() - parent_->window()->width();
+		}
+		if ((parent_->window()->height() + ypath) < parent_->window()->minimumHeight()) {
+			ypath = parent_->window()->minimumHeight() - parent_->window()->height();
+		}
+		parent_->window()->setGeometry(parent_->window()->x() - xpath,
+						parent_->window()->y() - ypath,
+						parent_->window()->width() + xpath,
+						parent_->window()->height() + ypath);
+
+	}
+	else if (isLeftButton && inVRect && isResize && !maximized) {
+		setCursor(QCursor(Qt::SizeVerCursor));
+		ypath = parent_->window()->y() - pg.y();
+		if ((parent_->window()->height() + ypath) < parent_->window()->minimumHeight()) {
+			ypath = parent_->window()->minimumHeight() - parent_->window()->height();
+		}
+		parent_->window()->setGeometry(parent_->window()->x(),
+						parent_->window()->y() - ypath,
+						parent_->window()->width(),
+						parent_->window()->height() + ypath);
+	}
+	else if (isLeftButton && inRDRect && isResize && !maximized) {
+		setCursor(QCursor(Qt::SizeBDiagCursor));
+		ypath = parent_->window()->y() - pg.y();
+		xpath = pg.x() - parent_->window()->geometry().right();
+		if ((parent_->window()->height() + ypath) < parent_->window()->minimumHeight()) {
+			ypath = parent_->window()->minimumHeight() - parent_->window()->height();
+		}
+		parent_->window()->setGeometry(parent_->window()->x(),
+						parent_->window()->y() - ypath,
+						parent_->window()->width() + xpath,
+						parent_->window()->height() + ypath);
+
+	}
+	else if(isLeftButton && isDrag &&!isResize && !maximized) {
+		setCursor(QCursor(Qt::ArrowCursor));
+		parent_->window()->move( e->globalPos() - movepath );
+	}
+	e->accept();
+}
+
+void PsiWindowHeader::mouseEnterEvent(const int mouse_x, const int mouse_y, const QRect &geom)
+{
+	if(mouse_y <= geom.top()+7
+		&& qAbs(mouse_x - geom.left()) <= 4) {
+		inLDRect = true;
+		inRDRect = false;
+		inVRect = false;
+	}
+	else if(mouse_y <= geom.top()+7
+		&& qAbs(mouse_x - geom.right()) <= 4) {
+		inRDRect = true;
+		inLDRect = false;
+		inVRect = false;
+	}
+	else if (mouse_x > (geom.left() + 4)
+		&& mouse_x < (geom.right() - 4)
+		&& qAbs(mouse_y - geom.top()) <= 4) {
+		inVRect = true;
+		inLDRect = false;
+		inRDRect = false;
+	}
+	else {
+		inVRect = false;
+		inLDRect = false;
+		inRDRect = false;
+	}
+}
+
+void PsiWindowHeader::mouseReleaseEvent(QMouseEvent *e)
+{
+	if (e->button() == Qt::LeftButton && isDrag) {
+		movepath.setX(0);
+		movepath.setY(0);
+		isDrag = false;
+		isResize = false;
+		setCursor(QCursor(Qt::ArrowCursor));
+	}
+	int min_x = qMin(ui_.hideButton->geometry().left(), qMin(ui_.maximizeButton->geometry().left(), ui_.closeButton->geometry().left()));
+	int max_x = qMax(ui_.hideButton->geometry().right(), qMax(ui_.maximizeButton->geometry().right(), ui_.closeButton->geometry().right()));
+	if (e->button() == Qt::MidButton) {
+		if (((e->x() > geometry().left() && e->x() < min_x)
+			|| (e->x() < geometry().right() && e->x() > max_x ))
+			&& e->y() > geometry().top()
+			&& e->y() < geometry().bottom()) {
+			hidePressed();
+		}
+	}
+	e->accept();
+}
new file mode 100644
--- /dev/null
+++ b/src/widgets/psiwindowheader.h
@@ -0,0 +1,65 @@
+/*
+ * psiwindowheader.cpp
+ * Copyright (C) 2010  Khryukin Evgeny, Vitaly Tonkacheyev
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
+
+#ifndef PSIWINDOWHEADER_H
+#define PSIWINDOWHEADER_H
+
+#include "ui_psiwindowheader.h"
+
+#include <QToolButton>
+#include <QMouseEvent>
+#include <QRect>
+
+class PsiWindowHeader : public QWidget
+{
+	Q_OBJECT
+public:
+	PsiWindowHeader(QWidget* p);
+	~PsiWindowHeader();
+
+private:
+	Ui::PsiWindowHeader ui_;
+	QWidget *parent_;
+	QPoint movepath;
+	bool isDrag;
+	bool isResize;
+	bool inVRect;
+	bool inLDRect;
+	bool inRDRect;
+	bool maximized;
+	QRect oldSize;
+	QSize defaultSize;
+	void mouseEnterEvent(const int mouse_x, const int mouse_y, const QRect &geom);
+
+private slots:
+	void hidePressed();
+	void closePressed();
+	void maximizePressed();
+
+protected:
+	void mouseMoveEvent(QMouseEvent *e);
+	void mousePressEvent(QMouseEvent *e);
+	void mouseReleaseEvent(QMouseEvent *e);
+	void mouseDoubleClickEvent(QMouseEvent *e);
+
+};
+
+#endif // PSIWINDOWHEADER_H
new file mode 100644
--- /dev/null
+++ b/src/widgets/psiwindowheader.ui
@@ -0,0 +1,120 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>PsiWindowHeader</class>
+ <widget class="QWidget" name="PsiWindowHeader">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>130</width>
+    <height>31</height>
+   </rect>
+  </property>
+  <property name="sizePolicy">
+   <sizepolicy hsizetype="Expanding" vsizetype="Minimum">
+    <horstretch>0</horstretch>
+    <verstretch>0</verstretch>
+   </sizepolicy>
+  </property>
+  <property name="mouseTracking">
+   <bool>true</bool>
+  </property>
+  <property name="windowTitle">
+   <string>PsiWindowHeader</string>
+  </property>
+  <layout class="QVBoxLayout" name="verticalLayout">
+   <property name="spacing">
+    <number>0</number>
+   </property>
+   <property name="margin">
+    <number>0</number>
+   </property>
+   <item>
+    <layout class="QHBoxLayout" name="horiz">
+     <property name="spacing">
+      <number>0</number>
+     </property>
+     <item>
+      <widget class="QFrame" name="headerFrame">
+       <property name="frameShape">
+        <enum>QFrame::NoFrame</enum>
+       </property>
+       <property name="frameShadow">
+        <enum>QFrame::Plain</enum>
+       </property>
+       <property name="lineWidth">
+        <number>1</number>
+       </property>
+       <layout class="QHBoxLayout" name="horizontalLayout_3">
+        <property name="spacing">
+         <number>0</number>
+        </property>
+        <property name="margin">
+         <number>0</number>
+        </property>
+        <item>
+         <layout class="QHBoxLayout" name="horiz1">
+          <property name="spacing">
+           <number>2</number>
+          </property>
+          <item>
+           <spacer name="spacer">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+          <item>
+           <widget class="QToolButton" name="hideButton">
+            <property name="text">
+             <string>...</string>
+            </property>
+            <property name="autoRaise">
+             <bool>true</bool>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QToolButton" name="maximizeButton">
+            <property name="text">
+             <string>...</string>
+            </property>
+            <property name="autoRaise">
+             <bool>true</bool>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QToolButton" name="closeButton">
+            <property name="sizePolicy">
+             <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
+              <horstretch>0</horstretch>
+              <verstretch>0</verstretch>
+             </sizepolicy>
+            </property>
+            <property name="text">
+             <string>...</string>
+            </property>
+            <property name="autoRaise">
+             <bool>true</bool>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </widget>
+     </item>
+    </layout>
+   </item>
+  </layout>
+ </widget>
+ <resources/>
+ <connections/>
+</ui>
--- a/src/widgets/widgets.pri
+++ b/src/widgets/widgets.pri
@@ -16,6 +16,7 @@ SOURCES += \
 	$$PWD/psitiplabel.cpp \
 	$$PWD/psitabwidget.cpp \
 	$$PWD/psitabbar.cpp \
+	$$PWD/psiwindowheader.cpp \
 	$$PWD/actionlineedit.cpp \
 	$$PWD/typeaheadfind.cpp
 
@@ -43,10 +44,12 @@ HEADERS += \
 	$$PWD/psitiplabel.h \
 	$$PWD/psitabwidget.h \
 	$$PWD/psitabbar.h \
+	$$PWD/psiwindowheader.h \
 	$$PWD/actionlineedit.h \
 	$$PWD/typeaheadfind.h
 
-FORMS += $$PWD/fancypopup.ui
+FORMS += $$PWD/fancypopup.ui \
+	$$PWD/psiwindowheader.ui
 
 # to remove dependency on iconset and stuff
 #DEFINES += WIDGET_PLUGIN
