--- psi.orig/iris/src/xmpp/xmpp-im/client.cpp
+++ psi/iris/src/xmpp/xmpp-im/client.cpp
@@ -102,6 +102,8 @@ using namespace Jabber;*/
 #define vsnprintf _vsnprintf
 #endif
 
+#define GROUPS_DELIMITER_TIMEOUT 10
+
 namespace XMPP
 {
 
@@ -887,12 +889,38 @@ void Client::prRoster(const Roster &r)
 	importRoster(r);
 }
 
-void Client::rosterRequest()
+void Client::rosterRequest(bool withGroupsDelimiter)
 {
 	if(!d->active)
 		return;
 
 	JT_Roster *r = new JT_Roster(rootTask());
+	int timeout = 0;
+	if (withGroupsDelimiter) {
+		connect(r, SIGNAL(finished()), SLOT(slotRosterDelimiterRequestFinished()));
+		r->getGroupsDelimiter();
+		// WORKAROUND: Some bad servers (Facebook for example) don't response
+		// on groups delimiter request. Wait timeout and go ahead.
+		r->setTimeout(GROUPS_DELIMITER_TIMEOUT);
+	}
+	else {
+		connect(r, SIGNAL(finished()), SLOT(slotRosterRequestFinished()));
+		r->get();
+		d->roster.flagAllForDelete(); // mod_groups patch
+	}
+
+	r->go(true);
+}
+
+void Client::slotRosterDelimiterRequestFinished()
+{
+	JT_Roster *r = qobject_cast<JT_Roster*>(sender());
+	if(r->success()) {
+		d->roster.setGroupsDelimiter(r->groupsDelimiter());
+		emit rosterGroupsDelimiterRequestFinished(r->groupsDelimiter());
+	}
+
+	r = new JT_Roster(rootTask());
 	connect(r, SIGNAL(finished()), SLOT(slotRosterRequestFinished()));
 	r->get();
 	d->roster.flagAllForDelete(); // mod_groups patch
@@ -1256,13 +1284,35 @@ void LiveRosterItem::setFlagForDelete(bo
 //---------------------------------------------------------------------------
 // LiveRoster
 //---------------------------------------------------------------------------
+class LiveRoster::Private
+{
+public:
+	QString groupsDelimiter;
+};
+
 LiveRoster::LiveRoster()
-:QList<LiveRosterItem>()
+	: QList<LiveRosterItem>()
+	, d(new LiveRoster::Private)
 {
 }
 
 LiveRoster::~LiveRoster()
 {
+	delete d;
+}
+
+LiveRoster::LiveRoster(const LiveRoster &other)
+	: QList<LiveRosterItem>(other)
+	, d(new LiveRoster::Private)
+{
+	d->groupsDelimiter = other.d->groupsDelimiter;
+}
+
+LiveRoster &LiveRoster::operator=(const LiveRoster &other)
+{
+	QList<LiveRosterItem>::operator=(other);
+	d->groupsDelimiter = other.d->groupsDelimiter;
+	return *this;
 }
 
 void LiveRoster::flagAllForDelete()
@@ -1291,4 +1341,14 @@ LiveRoster::ConstIterator LiveRoster::fi
 	return it;
 }
 
+void LiveRoster::setGroupsDelimiter(const QString &groupsDelimiter)
+{
+	d->groupsDelimiter = groupsDelimiter;
+}
+
+QString LiveRoster::groupsDelimiter() const
+{
+	return d->groupsDelimiter;
+}
+
 }
--- psi.orig/iris/src/xmpp/xmpp-im/types.cpp
+++ psi/iris/src/xmpp/xmpp-im/types.cpp
@@ -2846,13 +2846,35 @@ bool RosterItem::fromXml(const QDomEleme
 //---------------------------------------------------------------------------
 // Roster
 //---------------------------------------------------------------------------
+class Roster::Private
+{
+public:
+	QString groupsDelimiter;
+};
+
 Roster::Roster()
-:QList<RosterItem>()
+	: QList<RosterItem>()
+	, d(new Roster::Private)
 {
 }
 
 Roster::~Roster()
 {
+	delete d;
+}
+
+Roster::Roster(const Roster &other)
+	: QList<RosterItem>(other)
+	, d(new Roster::Private)
+{
+	d->groupsDelimiter = other.d->groupsDelimiter;
+}
+
+Roster &Roster::operator=(const Roster &other)
+{
+	QList<RosterItem>::operator=(other);
+	d->groupsDelimiter = other.d->groupsDelimiter;
+	return *this;
 }
 
 Roster::Iterator Roster::find(const Jid &j)
@@ -2875,6 +2897,16 @@ Roster::ConstIterator Roster::find(const
 	return end();
 }
 
+void Roster::setGroupsDelimiter(const QString &groupsDelimiter)
+{
+	d->groupsDelimiter = groupsDelimiter;
+}
+
+QString Roster::groupsDelimiter() const
+{
+	return d->groupsDelimiter;
+}
+
 
 //---------------------------------------------------------------------------
 // FormField
--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_client.h
+++ psi/iris/src/xmpp/xmpp-im/xmpp_client.h
@@ -79,7 +79,7 @@ namespace XMPP
 		QString resource() const;
 		Jid jid() const;
 
-		void rosterRequest();
+		void rosterRequest(bool withGroupsDelimiter = true);
 		void sendMessage(const Message &, bool want_notify = false);
 		void sendSubscription(const Jid &, const QString &, const QString& nick = QString());
 		void setPresence(const Status &);
@@ -138,6 +138,7 @@ namespace XMPP
 		void activated();
 		void disconnected();
 		//void authFinished(bool, int, const QString &);
+		void rosterGroupsDelimiterRequestFinished(const QString &);
 		void rosterRequestFinished(bool, int, const QString &);
 		void rosterItemAdded(const RosterItem &);
 		void rosterItemUpdated(const RosterItem &);
@@ -171,6 +172,7 @@ namespace XMPP
 		void streamIncomingXml(const QString &);
 		void streamOutgoingXml(const QString &);
 
+		void slotRosterDelimiterRequestFinished();
 		void slotRosterRequestFinished();
 
 		// basic daemons
--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_liveroster.h
+++ psi/iris/src/xmpp/xmpp-im/xmpp_liveroster.h
@@ -34,9 +34,19 @@ namespace XMPP
 		LiveRoster();
 		~LiveRoster();
 
+		LiveRoster(const LiveRoster &other);
+		LiveRoster &operator=(const LiveRoster &other);
+
 		void flagAllForDelete();
 		LiveRoster::Iterator find(const Jid &, bool compareRes=true);
 		LiveRoster::ConstIterator find(const Jid &, bool compareRes=true) const;
+
+		void setGroupsDelimiter(const QString &groupsDelimiter);
+		QString groupsDelimiter() const;
+
+	private:
+		class Private;
+		Private *d;
 	};
 }
 
--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_roster.h
+++ psi/iris/src/xmpp/xmpp-im/xmpp_roster.h
@@ -36,11 +36,18 @@ namespace XMPP
 		Roster();
 		~Roster();
 
+		Roster(const Roster &other);
+		Roster &operator=(const Roster &other);
+
 		Roster::Iterator find(const Jid &);
 		Roster::ConstIterator find(const Jid &) const;
 
+		void setGroupsDelimiter(const QString &groupsDelimiter);
+		QString groupsDelimiter() const;
+
 	private:
-		class RosterPrivate *d;
+		class Private;
+		Private *d;
 	};
 }
 
--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_task.cpp
+++ psi/iris/src/xmpp/xmpp-im/xmpp_task.cpp
@@ -24,6 +24,8 @@
 #include "xmpp_client.h"
 #include "xmpp_xmlcommon.h"
 
+#define DEFAULT_TIMEOUT 300
+
 using namespace XMPP;
 
 class Task::TaskPrivate
@@ -38,6 +40,7 @@ public:
 	Client *client;
 	bool insig, deleteme, autoDelete;
 	bool done;
+	int timeout;
 };
 
 Task::Task(Task *parent)
@@ -72,6 +75,7 @@ void Task::init()
 	d->deleteme = false;
 	d->autoDelete = false;
 	d->done = false;
+	d->timeout = DEFAULT_TIMEOUT;
 }
 
 Task *Task::parent() const
@@ -109,6 +113,16 @@ const QString & Task::statusString() con
 	return d->statusString;
 }
 
+void Task::setTimeout(int seconds) const
+{
+	d->timeout = seconds;
+}
+
+int Task::timeout()
+{
+	return d->timeout;
+}
+
 void Task::go(bool autoDelete)
 {
 	d->autoDelete = autoDelete;
@@ -121,6 +135,9 @@ void Task::go(bool autoDelete)
 	}
 	else {
 		onGo();
+		if (d->timeout) {
+			QTimer::singleShot(d->timeout * 1000, this, SLOT(timeoutFinished()));
+		}
 	}
 }
 
@@ -169,6 +186,16 @@ void Task::onDisconnect()
 	}
 }
 
+void Task::onTimeout()
+{
+	if(!d->done) {
+		d->success = false;
+		// d->statusCode = ErrTimeout;
+		d->statusString = tr("Request timed out");
+		done();
+	}
+}
+
 void Task::send(const QDomElement &x, bool want_notify)
 {
 	client()->send(x, want_notify);
@@ -225,6 +252,11 @@ void Task::clientDisconnected()
 	onDisconnect();
 }
 
+void Task::timeoutFinished()
+{
+	onTimeout();
+}
+
 void Task::debug(const char *fmt, ...)
 {
 	va_list ap;
--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_task.h
+++ psi/iris/src/xmpp/xmpp-im/xmpp_task.h
@@ -49,6 +49,9 @@ namespace XMPP {
 		int statusCode() const;
 		const QString & statusString() const;
 
+		void setTimeout(int seconds) const;
+		int timeout();
+
 		void go(bool autoDelete=false);
 		virtual bool take(const QDomElement &);
 		void safeDelete();
@@ -59,6 +62,7 @@ namespace XMPP {
 	protected:
 		virtual void onGo();
 		virtual void onDisconnect();
+		virtual void onTimeout();
 		void send(const QDomElement &, bool want_notify = false);
 		void setSuccess(int code=0, const QString &str="");
 		void setError(const QDomElement &);
@@ -69,6 +73,7 @@ namespace XMPP {
 
 	private slots:
 		void clientDisconnected();
+		void timeoutFinished();
 		void done();
 
 	private:
--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_tasks.cpp
+++ psi/iris/src/xmpp/xmpp-im/xmpp_tasks.cpp
@@ -373,9 +373,11 @@ public:
 	Private() {}
 
 	Roster roster;
+	QString groupsDelimiter;
 	QList<QDomElement> itemList;
 };
 
+
 JT_Roster::JT_Roster(Task *parent)
 :Task(parent)
 {
@@ -413,7 +415,7 @@ void JT_Roster::set(const Jid &jid, cons
 
 void JT_Roster::remove(const Jid &jid)
 {
-	type = 1;
+	type = 2;
 	//to = client()->host();
 	QDomElement item = doc()->createElement("item");
 	item.setAttribute("jid", jid.full());
@@ -421,11 +423,47 @@ void JT_Roster::remove(const Jid &jid)
 	d->itemList += item;
 }
 
+void JT_Roster::getGroupsDelimiter()
+{
+	type = 3;
+	//to = client()->host();
+	iq = createIQ(doc(), "get", to.full(), id());
+
+	QDomElement roster = doc()->createElement("roster");
+	roster.setAttribute("xmlns", "roster:delimiter");
+
+	QDomElement query = doc()->createElement("query");
+	query.setAttribute("xmlns", "jabber:iq:private");
+	query.appendChild(roster);
+
+	iq.appendChild(query);
+}
+
+void JT_Roster::setGroupsDelimiter(const QString &groupsDelimiter)
+{
+	type = 4;
+	//to = client()->host();
+	iq = createIQ(doc(), "set", to.full(), id());
+
+	QDomText text = doc()->createTextNode(groupsDelimiter);
+
+	QDomElement roster = doc()->createElement("roster");
+	roster.setAttribute("xmlns", "roster:delimiter");
+	roster.appendChild(text);
+
+	QDomElement query = doc()->createElement("query");
+	query.setAttribute("xmlns", "jabber:iq:private");
+	query.appendChild(roster);
+
+	iq.appendChild(query);
+}
+
 void JT_Roster::onGo()
 {
-	if(type == 0)
+	if (type == 0) {
 		send(iq);
-	else if(type == 1) {
+	}
+	else if(type == 1 || type == 2) {
 		//to = client()->host();
 		iq = createIQ(doc(), "set", to.full(), id());
 		QDomElement query = doc()->createElement("query");
@@ -435,6 +473,12 @@ void JT_Roster::onGo()
 			query.appendChild(it);
 		send(iq);
 	}
+	else if (type == 3) {
+		send(iq);
+	}
+	else if (type == 4) {
+		send(iq);
+	}
 }
 
 const Roster & JT_Roster::roster() const
@@ -442,6 +486,11 @@ const Roster & JT_Roster::roster() const
 	return d->roster;
 }
 
+QString JT_Roster::groupsDelimiter() const
+{
+	return d->groupsDelimiter;
+}
+
 QString JT_Roster::toString() const
 {
 	if(type != 1)
@@ -510,6 +559,24 @@ bool JT_Roster::take(const QDomElement &
 		setSuccess();
 		return true;
 	}
+	// getGroupsDelimiter
+	else if (type == 3) {
+		if(x.attribute("type") == "result") {
+			QDomElement q = queryTag(x);
+			QDomElement delimiter = q.firstChild().toElement();
+			d->groupsDelimiter = delimiter.firstChild().toText().data();
+			setSuccess();
+		}
+		else {
+			setError(x);
+		}
+		return true;
+	}
+	// setGroupsDelimiter
+	else if (type == 4) {
+		setSuccess();
+		return true;
+	}
 
 	return false;
 }
--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_tasks.h
+++ psi/iris/src/xmpp/xmpp-im/xmpp_tasks.h
@@ -97,7 +97,12 @@ namespace XMPP
 		void set(const Jid &, const QString &name, const QStringList &groups);
 		void remove(const Jid &);
 
+		// XEP-0083
+		void getGroupsDelimiter();
+		void setGroupsDelimiter(const QString &groupsDelimiter);
+
 		const Roster & roster() const;
+		QString groupsDelimiter() const;
 
 		QString toString() const;
 		bool fromString(const QString &);
