--- a/options/default.xml
+++ b/options/default.xml
@@ -218,6 +218,7 @@ QLineEdit#le_status_text {
 				<lockdown-roster type="bool">false</lockdown-roster>
 				<raise-on-new-event type="bool">false</raise-on-new-event>
 				<quit-on-close type="bool">false</quit-on-close>
+				<raise-inactive type="bool">true</raise-inactive>
 				<show-avatar-frame type="bool">false</show-avatar-frame>
 				<show>
 					<agent-contacts type="bool">true</agent-contacts>
--- a/src/mainwin.cpp
+++ b/src/mainwin.cpp
@@ -84,6 +84,10 @@
 #include "rosteravatarframe.h"
 #include "avatars.h"
 
+#ifdef HAVE_X11
+#include <x11windowsystem.h>
+#endif
+
 using namespace XMPP;
 
 static const QString showStatusMessagesOptionPath = "options.ui.contactlist.status-messages.show";
@@ -161,6 +165,10 @@ public:
 	PsiRosterWidget* rosterWidget_;
 #endif
 
+#ifdef Q_OS_WIN
+	DWORD deactivationTickCount;
+#endif
+
 	void registerActions();
 	IconAction* getAction( QString name );
 	void updateMenu(QStringList actions, QMenu* menu);
@@ -1478,7 +1486,23 @@ void MainWin::closeEvent(QCloseEvent* e)
 
 void MainWin::changeEvent(QEvent *event)
 {
-    if (event->type() == QEvent::ActivationChange ||
+#ifdef Q_OS_WIN
+	if (event->type() == QEvent::ActivationChange
+		&& PsiOptions::instance()->getOption("options.ui.systemtray.enable").toBool()
+		&& PsiOptions::instance()->getOption("options.ui.contactlist.raise-inactive").toBool()) {
+		//On Windows app window loose active state when you
+		//  click on tray icon. Workaround is to use timer:
+		//  we'll keep activated == true within 300 msec
+		//  (+ doubleClickInterval, if double click is enabled)
+		//  after deactivation.
+		if (!isActiveWindow())
+		{
+			d->deactivationTickCount = GetTickCount();
+		}
+	}
+#endif
+
+	if (event->type() == QEvent::ActivationChange ||
 	    event->type() == QEvent::WindowStateChange)
 	{
 		if (d->mainTabs) {
@@ -1606,18 +1630,42 @@ void MainWin::optionsUpdate()
 	updateTray();
 }
 
-void MainWin::toggleVisible()
+void MainWin::toggleVisible(bool fromTray)
 {
-	if(!isHidden()) {
-		trayHide();
-	}
-	else {
-		trayShow();
+	if (PsiOptions::instance()->getOption("options.ui.contactlist.raise-inactive").toBool())
+	{
+		bool hidden = false;
+#ifdef Q_OS_WIN
+		if (fromTray) {
+			int timeout = 300;
+			if (PsiOptions::instance()->getOption("options.ui.systemtray.use-double-click").toBool())
+				timeout += qApp->doubleClickInterval();
+			hidden = isHidden() || (GetTickCount() - d->deactivationTickCount > timeout);
+		}
+		else {
+			hidden = isHidden() || !isActiveWindow();
+		}
+#elif defined(HAVE_X11)
+		Q_UNUSED(fromTray);
+		hidden = isHidden() || X11WindowSystem::instance()->isWindowObscured(this, PsiOptions::instance()->getOption("options.ui.contactlist.always-on-top").toBool());
+#else
+		Q_UNUSED(fromTray);
+		hidden = isHidden() || !isActiveWindow();
+#endif
+		if(hidden) {
+			trayShow();
+		}
+		else {
+			trayHide();
+		}
 	}
+	else
+		isHidden() ? trayShow() : trayHide();
 }
 
 void MainWin::setTrayToolTip(const Status& status, bool, bool)
 {
+	Q_UNUSED (status);
 	if (!d->tray) {
 		return;
 	}
@@ -1635,32 +1683,21 @@ void MainWin::trayClicked(const QPoint &, int button)
 		return;
 	}
 
-	if(!isHidden()) {
-		trayHide();
-	}
-	else {
-		trayShow();
-	}
+	toggleVisible(true);
 }
 
 void MainWin::trayDoubleClicked()
 {
-	if(!PsiOptions::instance()->getOption("options.ui.systemtray.use-double-click").toBool()) {
-		return;
-	}
+	//Double click works like second single click now if "double-click" style is disabled
 
-	if(d->nextAmount > 0) {
-		doRecvNextEvent();
-		return;
+	if(PsiOptions::instance()->getOption("options.ui.systemtray.use-double-click").toBool()) {
+		if(d->nextAmount > 0) {
+			doRecvNextEvent();
+			return;
+		}
 	}
 
-
-	if(!isHidden()) {
-		trayHide();
-	}
-	else {
-		trayShow();
-	}
+	toggleVisible(true);
 }
 
 void MainWin::trayShow()
--- a/src/mainwin.h
+++ b/src/mainwin.h
@@ -180,7 +180,7 @@ public slots:
 	void optionsUpdate();
 	void setTrayToolTip(const XMPP::Status &, bool usePriority = false, bool isManualStatus = false);
 
-	void toggleVisible();
+	void toggleVisible(bool fromTray = false);
 
 	void avcallConfig();
 
--- a/src/src.pri
+++ b/src/src.pri
@@ -349,6 +349,10 @@ SOURCES += \
 	$$PWD/accountloginpassword.cpp \
 	$$PWD/mcmdcompletion.cpp
 
+unix:!macx:!haiku {
+	HEADERS += $$PWD/x11windowsystem.h
+	SOURCES += $$PWD/x11windowsystem.cpp
+}
 
 CONFIG += filetransfer
 filetransfer {
new file mode 100644
index 0000000..ea1ae7d
--- /dev/null
+++ b/src/x11windowsystem.cpp
@@ -0,0 +1,215 @@
+#include "x11windowsystem.h"
+
+#include <QX11Info>
+#include <X11/Xlib.h>
+
+const long MAX_PROP_SIZE = 100000;
+X11WindowSystem* X11WindowSystem::_instance = 0;
+
+X11WindowSystem::X11WindowSystem()
+{
+	const int atomsCount = 10;
+	const char* names[atomsCount] = {
+		"_NET_CLIENT_LIST_STACKING",
+		"_NET_FRAME_EXTENTS",
+
+		"_NET_WM_WINDOW_TYPE",
+		"_NET_WM_WINDOW_TYPE_NORMAL",
+		"_NET_WM_WINDOW_TYPE_DIALOG",
+		"_NET_WM_WINDOW_TYPE_UTILITY",
+		"_NET_WM_WINDOW_TYPE_SPLASH",
+
+		"_NET_WM_STATE",
+		"_NET_WM_STATE_ABOVE",
+		"_NET_WM_STATE_HIDDEN"
+	};
+	Atom atoms[atomsCount], *atomsp[atomsCount] = {
+		&net_client_list_stacking,
+		&net_frame_extents,
+
+		&net_wm_window_type,
+		&net_wm_window_type_normal,
+		&net_wm_window_type_dialog,
+		&net_wm_window_type_utility,
+		&net_wm_window_type_splash,
+
+		&net_wm_state,
+		&net_wm_state_above,
+		&net_wm_state_hidden
+	};
+	int i = atomsCount;
+	while (i--)
+		atoms[i] = 0;
+
+	XInternAtoms(QX11Info::display(), (char**)names, atomsCount, true, atoms);
+
+	i = atomsCount;
+	while (i--)
+		*atomsp[i] = atoms[i];
+
+	if (net_wm_window_type_normal != None)
+		normalWindows.insert(net_wm_window_type_normal);
+	if (net_wm_window_type_dialog != None)
+		normalWindows.insert(net_wm_window_type_dialog);
+	if (net_wm_window_type_utility != None)
+		normalWindows.insert(net_wm_window_type_utility);
+	if (net_wm_window_type_splash != None)
+		normalWindows.insert(net_wm_window_type_splash);
+
+	if (net_wm_state_hidden != None)
+		ignoredWindowStates.insert(net_wm_state_hidden);
+}
+
+X11WindowSystem* X11WindowSystem::instance()
+{
+	if (!_instance)
+		_instance = new X11WindowSystem();
+	return X11WindowSystem::_instance;
+}
+
+// Get window coords relative to desktop window
+QRect X11WindowSystem::windowRect(Window win)
+{
+	Window w_unused;
+	int x, y;
+	unsigned int w, h, junk;
+	XGetGeometry(QX11Info::display(), win, &w_unused, &x, &y, &w, &h, &junk, &junk);
+	XTranslateCoordinates(QX11Info::display(), win, QX11Info::appRootWindow(), 0, 0, &x, &y, &w_unused);
+
+	Atom type_ret;
+	int format_ret;
+	unsigned char *data_ret;
+	unsigned long nitems_ret, unused;
+	const Atom XA_CARDINAL = (Atom) 6;
+	if (net_frame_extents != None && XGetWindowProperty(QX11Info::display(), win, net_frame_extents,
+														0l, 4l, False, XA_CARDINAL, &type_ret, &format_ret,
+														&nitems_ret, &unused, &data_ret) == Success)
+	{
+		if (type_ret == XA_CARDINAL && format_ret == 32 && nitems_ret == 4) {
+			//Struts array: 0 - left, 1 - right, 2 - top, 3 - bottom
+			long *d = (long *) data_ret;
+			x -= d[0];
+			y -= d[2];
+			w += d[0] + d[1];
+			h += d[2] + d[3];
+		}
+		if ( data_ret )
+			XFree(data_ret);
+	}
+
+	return QRect(x, y, w, h);
+}
+
+// Determine if window is obscured by other windows
+bool X11WindowSystem::isWindowObscured(QWidget *widget, bool alwaysOnTop)
+{
+	if (net_wm_state_above != None)
+	{
+		if (!alwaysOnTop)
+			ignoredWindowStates.insert(net_wm_state_above);
+		else
+			ignoredWindowStates.remove(net_wm_state_above);
+	}
+
+	//TODO Is it correct to use QX11Info::appRootWindow() as root window?
+	Q_ASSERT(widget);
+	QWidget* w = widget->window();
+	Window win = w->winId();
+
+	const Atom XA_WINDOW= (Atom) 33;
+	Atom type_ret;
+	int format_ret;
+	unsigned char *data_ret;
+	unsigned long nitems_ret, unused;
+
+	if (net_client_list_stacking != None)
+	{
+		QRect winRect = windowRect(win);
+		if (XGetWindowProperty(QX11Info::display(), QX11Info::appRootWindow(), net_client_list_stacking,
+					   0, MAX_PROP_SIZE, False, XA_WINDOW, &type_ret,
+					   &format_ret, &nitems_ret, &unused, &data_ret) == Success) {
+			if (type_ret == XA_WINDOW && format_ret == 32) {
+				Window *wins = (Window *) data_ret;
+
+				//Enumerate windows in reverse order (from most foreground window)
+				while (nitems_ret--)
+				{
+					Window current = wins[nitems_ret];
+
+					//We are not interested in underlying windows
+					if (current == win)
+						break;
+
+					//If our window in not alwaysOnTop ignore such windows, because we can't raise on top of them
+					if (windowHasAnyOfStates(current, ignoredWindowStates))
+						continue;
+
+					if (!windowHasOnlyTypes(current, normalWindows))
+						continue;
+
+					QRect rect = windowRect(current);
+					if (winRect.intersects(rect))
+						return true;
+				}
+			}
+			if (data_ret)
+				XFree(data_ret);
+		}
+	}
+	return false;
+}
+
+//If window has any type other than allowed_types return false, else return true
+bool X11WindowSystem::windowHasOnlyTypes(Window win, const QSet<Atom> &allowedTypes)
+{
+	const Atom XA_ATOM = (Atom) 4;
+	Atom type_ret;
+	int format_ret;
+	unsigned char *data_ret;
+	unsigned long nitems_ret, unused;
+
+	if (net_wm_window_type != None && XGetWindowProperty(QX11Info::display(), win, net_wm_window_type,
+														 0l, 2048l, False, XA_ATOM, &type_ret,
+														 &format_ret, &nitems_ret, &unused, &data_ret) == Success) {
+		if (type_ret == XA_ATOM && format_ret == 32 && nitems_ret > 0) {
+			Atom *types = (Atom *) data_ret;
+			for (unsigned long i = 0; i < nitems_ret; i++)
+			{
+				if (!allowedTypes.contains(types[i]))
+				{
+					return false;
+				}
+			}
+		}
+		if (data_ret)
+			XFree(data_ret);
+		return true;
+	}
+	else
+		return false;
+}
+
+//If window has any of filteredStates return
+bool X11WindowSystem::windowHasAnyOfStates(Window win, const QSet<Atom> &filteredStates)
+{
+	const Atom XA_ATOM = (Atom) 4;
+	Atom type_ret;
+	int format_ret;
+	unsigned char *data_ret;
+	unsigned long nitems_ret, unused;
+	if (net_wm_state != None && XGetWindowProperty(QX11Info::display(), win, net_wm_state, 0l, 2048l,
+												   False, XA_ATOM, &type_ret, &format_ret,
+												   &nitems_ret, &unused, &data_ret) == Success) {
+		if (type_ret == XA_ATOM && format_ret == 32 && nitems_ret > 0) {
+			Atom *states = (Atom *) data_ret;
+			for (unsigned long i = 0; i < nitems_ret; i++) {
+
+				if (filteredStates.contains(states[i]))
+					return true;
+			}
+		}
+		if ( data_ret )
+			XFree(data_ret);
+	}
+	return false;
+}
new file mode 100644
--- /dev/null
+++ b/src/x11windowsystem.h
@@ -0,0 +1,44 @@
+#ifndef X11WINDOWSYSTEM_H
+#define X11WINDOWSYSTEM_H
+
+#include <QtCore>
+#include <QWidget>
+#include <QRect>
+#include <QSet>
+
+//TODO: Find a way to include Xlib here and not redefine Atom and Window types
+typedef unsigned long Atom;
+typedef unsigned long Window;
+
+class X11WindowSystem {
+private:
+	Atom net_client_list_stacking;
+	Atom net_frame_extents;
+
+	Atom net_wm_window_type;
+	Atom net_wm_window_type_normal;
+	Atom net_wm_window_type_dialog;
+	Atom net_wm_window_type_utility;
+	Atom net_wm_window_type_splash;
+
+	Atom net_wm_state;
+	Atom net_wm_state_above;
+	Atom net_wm_state_hidden;
+
+	QSet<Atom> normalWindows, ignoredWindowStates;
+
+	static X11WindowSystem* _instance;
+	X11WindowSystem();
+	~X11WindowSystem() {}
+	X11WindowSystem(const X11WindowSystem& ) {};
+	X11WindowSystem & operator=(const X11WindowSystem &) {return *this;};
+
+public:
+	static X11WindowSystem* instance();
+	QRect windowRect(Window win);
+	bool isWindowObscured(QWidget *widget, bool alwaysOnTop);
+	bool windowHasOnlyTypes(Window win, const QSet<Atom> &allowedTypes);
+	bool windowHasAnyOfStates(Window win, const QSet<Atom> &filteredStates);
+};
+
+#endif // X11WINDOWSYSTEM_H
